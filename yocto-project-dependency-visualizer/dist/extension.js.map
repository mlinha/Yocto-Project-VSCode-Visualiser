{"version":3,"file":"extension.js","mappings":"iOAAA,eACA,SACA,SACA,SACA,SACA,SAEA,SACA,SAEA,QACA,SAKA,IAAIA,EAKAC,EAKAC,EAKAC,EAKAC,EAKAC,EAKAC,EAgIJ,SAAgBC,EAAoBC,EAA0BC,EAAcC,EAAkBC,EAAoBC,EAAkBC,GACnI,IAAIC,EAAc,GAClB,QAA0CC,IAAtCC,EAAOC,UAAUC,iBAAgC,CACpD,MAAMC,EAAUH,EAAOC,UAAUC,iBAAiB,GAAGE,IAAIC,OAAS,0BAClE,KAAK,IAAAC,YAAWH,GAIf,YAFAH,EAAOO,OAAOC,iBAAiB,6HAMhCV,EADgB,IAAI,EAAAW,UAAUN,GACNO,aAAajB,EAAMI,IAC3C,IAAAc,eAAcX,EAAOC,UAAUC,iBAAiB,GAAGE,IAAIC,OAAS,oBAAqBP,GAGlE,KAAhBA,GAMS,mBAATD,EACHG,EAAOY,SAASC,eAAe,aAAc,gBAAgB,GAG7Db,EAAOY,SAASC,eAAe,aAAc,gBAAgB,GAEjD,aAAThB,EACHG,EAAOY,SAASC,eAAe,aAAc,cAAc,GAG3Db,EAAOY,SAASC,eAAe,aAAc,cAAc,GAG5DvB,EAAmBwB,WAAWhB,EAAaD,EAAMH,EAAUC,EAAYC,GAEvEZ,EAAwB+B,gBACxB/B,EAAwBgC,UAExB5B,EAAQ6B,oBAERhC,EAAuB8B,gBACvB7B,EAA0B6B,gBAC1B5B,EAAyB4B,gBAEzB9B,EAAuB+B,UACvB9B,EAA0B8B,UAC1B7B,EAAyB6B,UAEzB1B,EAAmB4B,cAAc1B,IAjChCQ,EAAOO,OAAOC,iBAAiB,yBA4DjC,SAAgBW,EAAsBC,GACrCpC,EAAwBqC,WAAWD,GACnCpC,EAAwBgC,UAExB5B,EAAQ6B,oBAERhC,EAAuB8B,gBACvB7B,EAA0B6B,gBAC1B5B,EAAyB4B,gBAEzB9B,EAAuB+B,UACvB9B,EAA0B8B,UAC1B7B,EAAyB6B,UAEzB1B,EAAmBgC,WAAWF,GArN/B,oBAAyBG,GACxBnC,EAAU,IAAI,EAAAoC,QAAQD,EAAQ/B,cAC9BH,EAAS,IAAI,EAAAoC,OAAOF,EAAQ/B,cAC5BF,EAAqB,IAAI,EAAAoC,mBAAmBH,EAAQ/B,cAEpDR,EAA0B,IAAI,EAAA2C,wBAC9B1C,EAAyB,IAAI,EAAA2C,4BAC7B1C,EAA4B,IAAI,EAAA0C,4BAChCzC,EAA2B,IAAI,EAAAyC,4BAE/BL,EAAQM,cAAcC,KACrB9B,EAAOY,SAASmB,gBAAgB,6DAA6D,KAC5FxC,EAAoBgC,EAAQ/B,aAAc,EAAAwC,aAAc,EAAAC,iBAAkB,EAAAC,mBAAoB,EAAAC,iBAAkB,EAAAC,kBAGlHb,EAAQM,cAAcC,KACrB9B,EAAOY,SAASmB,gBAAgB,kDAAmDM,I,WACnDtC,KAAjB,QAAV,EAAAsC,EAAKC,aAAK,eAAEC,aACfpB,EAAsBkB,EAAKC,MAAMC,gBAIpChB,EAAQM,cAAcC,KACrB9B,EAAOY,SAASmB,gBAAgB,kDAAmDM,I,WAC7CtC,KAAjB,QAAhB,EAAAsC,EAAKG,mBAAW,eAAED,cACrB,IAAAE,YAAWJ,EAAKG,iBAInBjB,EAAQM,cAAcC,KACrB9B,EAAOY,SAASmB,gBAAgB,0DAA2DM,I,MA8EjEjB,EA7EA,IAArBiB,EAAKK,YACR1C,EAAOO,OAAOC,iBAAiB,sEAEIT,KAAjB,QAAV,EAAAsC,EAAKC,aAAK,eAAEC,cA0EInB,EAzELiB,EAAKC,MAAMC,WA0EjCjD,EAAmBqD,mBAAmBvB,QAtEtCG,EAAQM,cAAcC,KACrB9B,EAAOO,OAAOqC,4BACb,wBACAxD,EACA,CACCyD,eACA,CACCC,yBAAyB,MAK7BvB,EAAQM,cAAcC,KACrB9B,EAAOO,OAAOqC,4BACb,uBACAvD,EACA,CACCwD,eACA,CACCC,yBAAyB,MAK7BvB,EAAQM,cAAcC,KACrB9B,EAAOO,OAAOwC,yBACb,eACA/D,IAGFuC,EAAQM,cAAcC,KACrB9B,EAAOO,OAAOwC,yBACb,eACA9D,IAGFsC,EAAQM,cAAcC,KACrB9B,EAAOO,OAAOwC,yBACb,iBACA7D,IAGFqC,EAAQM,cAAcC,KACrB9B,EAAOO,OAAOwC,yBACb,gBACA5D,IAIFa,EAAOY,SAASC,eAAe,aAAc,gBAAgB,GAC7Db,EAAOY,SAASC,eAAe,aAAc,cAAc,IAiC5D,wBA2DA,4BAAiCO,EAAc4B,EAAgBC,GAC9DjE,EAAwBkE,QAAQ9B,EAAM4B,GACtChE,EAAwBgC,UACxB1B,EAAmB+B,WAAW4B,GAE9BhE,EAAuB8B,gBACvB7B,EAA0B6B,gBAC1B5B,EAAyB4B,gBAEzB9B,EAAuB+B,UACvB9B,EAA0B8B,UAC1B7B,EAAyB6B,WAO1B,0BAoBA,uBACC1B,EAAmB6D,iBAOpB,qBAA0BC,GACZ,IAATA,EAKC9D,EAAmB+D,iBAMxBpE,EAAuB8B,gBACvB7B,EAA0B6B,gBAC1B5B,EAAyB4B,gBAEzB9B,EAAuB+B,UACvB9B,EAA0B8B,UAC1B7B,EAAyB6B,UAEzB1B,EAAmBgE,UAAUF,IAb5BpD,EAAOO,OAAOC,iBAAiB,+BAL/BR,EAAOO,OAAOC,iBAAiB,qDAyBjC,yBAA8B+C,GAC7BlE,EAAOmE,cAAcD,GACrBlE,EAAOoE,cAUR,sBAA2BC,EAAYC,EACtCC,EAAoEC,GACpEzE,EAAQ0E,WAAWJ,GAEnBzE,EAAuB8B,gBACvB7B,EAA0B6B,gBAC1B5B,EAAyB4B,gBAEzB9B,EAAuB8E,YAAYJ,GACnCzE,EAA0B6E,YAAYH,GACtCzE,EAAyB4E,YAAYF,GAErC5E,EAAuB+B,UACvB9B,EAA0B8B,UAC1B7B,EAAyB6B,Y,2ECvU1B,aAiBIgD,YAAYC,EAAgBC,GACxBC,KAAKF,OAASA,EACdE,KAAKD,OAASA,K,2ECnBtB,aA2BIF,YAAYf,EAAY7B,GACpB+C,KAAKlB,GAAKA,EACVkB,KAAK/C,KAAOA,EACZ+C,KAAKnB,OAAS,GACdmB,KAAKC,QAAU,GAOZC,QACH,OAAOF,KAAKlB,GAOTqB,UACH,OAAOH,KAAK/C,KAOToB,YACH,OAAO2B,KAAKnB,OAOTuB,UAAUvB,GACbmB,KAAKnB,OAASA,EAOXwB,aACH,OAAOL,KAAKC,QAOTK,WAAWL,GACdD,KAAKC,QAAUA,K,kFCpFvB,eACA,SACA,SAEA,SACA,SACA,SAKA,kBAWI,YAAmBjE,GACfgE,KAAKhE,QAAUA,EASZO,aAAajB,EAAcI,GAU9B,OAPIJ,IAAS,EAAAuC,aACKmC,KAAKO,oBAAoB7E,GAGzBsE,KAAKQ,qBAAqBlF,EAAMI,GAW/C6E,oBAAoB7E,GACvB,IAAI+E,EAAQ,EACRC,GAAO,IAAAC,UAASX,KAAKhE,SACrB4E,EAA6B,GAC7BC,EAA6B,GAqBjC,OAnBAH,MAAAA,GAAAA,EAAMI,SAAQC,IACV,IAAIC,EAAWD,EAAKE,MAAM,QAC1B,GAAID,EAAS,GAAGE,SAAS,+BAAiCF,EAAS,GAAGE,SAAS,WAAaF,EAAS,GAAGE,SAAS,uBAAwB,CACrI,MAAMC,EAAaH,EAAS,GAAGI,QAAQ,6BAA8B,IAAIA,QAAQ,IAAK,IAAIA,QAAQ,IAAK,IAAIC,OACrGC,EAAsBN,EAAS,GAAGI,QAAQ,uBAAwB,IAAIA,QAAQ,IAAK,IAAIA,QAAQ,IAAK,IAAIC,OAC1GC,IAAwBH,IACxBV,EAAQT,KAAKuB,aAAaX,EAAOC,EAAOM,EAAYG,EAAqBb,SAG5E,GAAIO,EAAS,GAAGE,SAAS,UAAW,CAGrC,MACMC,GAHNH,EAAWD,EAAKE,MAAM,MAEU,GAAGA,MAAM,KACP,GAAGG,QAAQ,IAAK,IAAIA,QAAQ,IAAK,IAAIC,OAEvEZ,EAAQT,KAAKwB,cAAcZ,EAAOI,EAAS,GAAIG,EAAYV,EAAO/E,OAInEsE,KAAKyB,kBAAkBb,EAAOC,GASlCL,qBAAqBlF,EAAcI,GACtC,IAAI+E,EAAQ,EACRC,GAAO,IAAAC,UAASX,KAAKhE,SACrB4E,EAA6B,GAC7BC,EAA6B,GAqBjC,OAnBAH,MAAAA,GAAAA,EAAMI,SAAQC,IACV,IAAIC,EAAWD,EAAKE,MAAM,QAC1B,GAAID,EAAS,GAAGE,SAAS5F,KAAU0F,EAAS,GAAGE,SAAS,UAAW,CAC/D,MAAMC,EAAaH,EAAS,GAAGI,QAAQ,IAAM9F,EAAM,IAAI8F,QAAQ,IAAK,IAAIA,QAAQ,IAAK,IAAIC,OACnFC,EAAsBN,EAAS,GAAGC,MAAM,KAAK,GAAGG,QAAQ,IAAK,IAAIA,QAAQ,IAAK,IAAIC,OACpFC,IAAwBH,IACxBV,EAAQT,KAAKuB,aAAaX,EAAOC,EAAOM,EAAYG,EAAqBb,SAG5E,GAAIO,EAAS,GAAGE,SAAS,UAAW,CAGrC,MACMC,GAHNH,EAAWD,EAAKE,MAAM,MAEU,GAAGA,MAAM,KACP,GAAGG,QAAQ,IAAK,IAAIA,QAAQ,IAAK,IAAIC,OAEvEZ,EAAQT,KAAKwB,cAAcZ,EAAOI,EAAS,GAAIG,EAAYV,EAAO/E,OAInEsE,KAAKyB,kBAAkBb,EAAOC,GAYjCU,aAAaX,EAA4BC,EAA4BM,EAAoBG,EAA6Bb,GAC1H,IAAIX,EACAC,EAECa,EAAMc,MAAKC,GAAOA,EAAYxB,WAAagB,IAM5CrB,EAAUc,EAAMgB,MAAKD,GAAOA,EAAYxB,WAAagB,IAAqBjB,SAL1EU,EAAMjD,KAAK,IAAI,EAAAkE,KAAKpB,EAAOU,IAC3BrB,EAASW,EACTA,KAMCG,EAAMc,MAAKC,GAAOA,EAAYxB,WAAamB,IAM5CvB,EAAUa,EAAMgB,MAAKD,GAAOA,EAAYxB,WAAamB,IAA8BpB,SALnFU,EAAMjD,KAAK,IAAI,EAAAkE,KAAKpB,EAAOa,IAC3BvB,EAASU,EACTA,KAKJ,MAAMqB,EAAO,IAAI,EAAAC,KAAKjC,EAAQC,GAG9B,OAFAc,EAAMlD,KAAKmE,GAEJrB,EAYHe,cAAcZ,EAA4BoB,EAAqBb,EAAoBV,EAAe/E,GACtG,IAEIuG,EAFQD,EAAYZ,QAAQ,IAAK,IAAIA,QAAQ,IAAK,IAAIA,QAAQ,SAAU,IAAIA,QAAQ,IAAK,IAAIA,QAAQ,IAAK,IAAIC,OAE5FJ,MAAM,SACxBiB,EAAaD,EAAUA,EAAUE,OAAS,GAE9C,GAAKvB,EAAMc,MAAKC,GAAOA,EAAYxB,WAAagB,IAS3C,CACD,MAAM5B,EAAQqB,EAAMgB,MAAKD,GAAOA,EAAYxB,WAAagB,IACzD5B,EAAKa,UAAU8B,GACF,aAATxG,GACA6D,EAAKe,YAAW,IAAA8B,cAAY,IAAAC,eAAcH,IAAajC,aAbF,CACzD,MAAMV,EAAO,IAAI,EAAAsC,KAAKpB,EAAOU,GAC7B5B,EAAKa,UAAU8B,GACF,aAATxG,GACA6D,EAAKe,YAAW,IAAA8B,cAAY,IAAAC,eAAcH,IAAajC,SAE3DW,EAAMjD,KAAK4B,GACXkB,IAUJ,OAAOA,EASHgB,kBAAkBb,EAAuBC,GAC7C,IAAIyB,EAAQ,IAAI,EAAAC,MAIhB,OAHAD,EAAME,IAAI,QAAS5B,GACnB0B,EAAME,IAAI,QAAS3B,GAEZ4B,KAAKC,UAAUJ,EAAMK,a,oFClMpC,eAOA,uBAA4B9D,GACxB,IAAI+D,EAA6C,GAC7ClC,GAAO,IAAAC,UAAS9B,GAIpB,GAFA+D,EAAe3C,QAAU,QAEpBS,EACD,OAAOkC,EAGX,IAAK,IAAIC,EAAI,EAAGA,EAAInC,EAAKyB,OAAQU,IAAK,CAClC,IACI7B,EADON,EAAKmC,GACI5B,MAAM,KAC1B,GAAID,EAASmB,OAAS,GACS,YAAvBnB,EAAS,GAAGK,OAAsB,CAClCuB,EAAe3C,QAAUe,EAAS,GAAGI,QAAQ,IAAK,IAAIA,QAAQ,IAAK,IAAIC,OACvE,OAKZ,OAAOuB,I,6JCzBE,EAAA/E,aAAuB,UAKvB,EAAAI,aAAuB,UAKvB,EAAAH,iBAA2B,IAK3B,EAAAC,mBAA6B,EAK7B,EAAAC,kBAA4B,M,yHCvBzC,eACA,SAwBA,SAAgBqE,EAAcxD,GAC1B,IAAIqD,EAAarD,EAEjB,QAA0CjD,IAAtCC,EAAOC,UAAUC,iBAAgC,CACjD,MAAM+G,EAAgBjH,EAAOC,UAAUC,iBAAiB,GAAGE,IAAIC,OAC/D,GAAI4G,EAAc5B,SAAS,OAAQ,CAC/B,MAAM6B,EAAWD,EAAc1B,QAAQ,OAAQ,IAAIH,MAAM,MACzDiB,EAAa,OAASa,EAAS,GAAK,KAAOA,EAAS,GAAK,KAAOlE,EAAOuC,QAAQ,IAAK,OAI5F,OAAOc,EA5BX,oBAAyBc,GACrB,IAAItC,EACJ,IACIA,GAAO,IAAAuC,cAAaD,EAAM,QAE9B,MAAOE,GACHxC,OAAO9E,EAGX,OAAO8E,MAAAA,OAAI,EAAJA,EAAMO,MAAM,OAQvB,kBAkBA,sBACI,MAAMkC,EAAW,iEAEjB,IAAIC,EAAO,GACX,IAAK,IAAIP,EAAI,EAAGA,EAAI,GAAIA,IACpBO,GAAQD,EAASE,OAAOC,KAAKC,MAAMD,KAAKE,SAAWL,EAAShB,SAGhE,OAAOiB,GAOX,sBAA2BvE,GACvB,IAAIqD,EAAaG,EAAcxD,GAE/BhD,EAAOC,UAAU2H,iBAAiBvB,GAAYwB,MAC1CC,GAAY9H,EAAOO,OAAOwH,iBAAiBD,KAC3C,IAAM9H,EAAOO,OAAOC,iBAAiB,qC,mGC/D7C,eACA,SAKA,oCAgBI,cAXQ,KAAAwH,qBAA6E,IAAIhI,EAAOiI,aAC1F,KAAAC,oBAAqE/D,KAAK6D,qBAAqBG,MAWjGhE,KAAKU,KAAO,GAMT7D,UACTmD,KAAK6D,qBAAqBI,OAQjBC,YAAYC,GACf,OAAOA,EAOJC,YAAYD,GAMf,OAAOnE,KAAKU,KAOTd,YAAYyE,GACfA,EAASvD,SAAQvB,IACbS,KAAKU,KAAK/C,KAAK,IAAI,EAAA2G,aAAa/E,EAAKtC,KAAMsC,EAAKV,OAAQU,EAAKgF,gBAO9D3H,gBACHoD,KAAKU,KAAO,M,qFCrEpB,eAKA,MAAa4D,UAAqBzI,EAAO2I,SAkBrC,YAAmBrG,EAAeU,EAAgB0F,GAC9CE,MACItG,EACAtC,EAAO6I,yBAAyBC,MACpC3E,KAAKnB,OAASA,EACdmB,KAAKuE,WAAaA,EAClBvE,KAAK4E,QAAU5E,KAAKnB,OAOjBN,YACH,OAAOyB,KAAKuE,WAOTlG,YACH,OAAO2B,KAAKnB,QAxCpB,kB,gGCLA,eACA,SAKA,gCAgBI,cAXQ,KAAAgF,qBAA6E,IAAIhI,EAAOiI,aAC1F,KAAAC,oBAAqE/D,KAAK6D,qBAAqBG,MAWjGhE,KAAKU,KAAO,GAMT7D,UACTmD,KAAK6D,qBAAqBI,OAQjBC,YAAYC,GACf,OAAOA,EAOJC,YAAYD,GAMf,OAAOnE,KAAKU,KAQT3B,QAAQZ,EAAeU,GAC1BmB,KAAKU,KAAK/C,KAAK,IAAI,EAAA2G,aAAanG,EAAOU,EAAQ,IAO5C3B,WAAWiB,GACd,IAAIsC,EAAQT,KAAKU,KAAKmE,WAAWtF,GAASA,EAAKpB,QAAUA,IACzD6B,KAAKU,KAAKoE,OAAOrE,EAAO,GAMrB7D,gBACHoD,KAAKU,KAAO,M,+EC7EpB,eACA,SAMA,eA2BI,YAAmBqE,GACf/E,KAAK+E,cAAgBA,EACrB/E,KAAKZ,WAAa,GAUf4F,mBAAmBC,GACtBjF,KAAKkF,MAAQD,EAEbA,EAAYE,QAAQC,QAAU,CAE1BC,eAAe,EAEfC,mBAAoB,CAChBzJ,EAAO0J,IAAIC,SAASxF,KAAK+E,cAAe,WAIhDE,EAAYE,QAAQM,KAAOzF,KAAK0F,mBAAmBT,EAAYE,SAE/DnF,KAAKV,aAOFD,cAAcD,GACjBY,KAAKZ,WAAaA,EAMfE,a,MACO,QAAV,EAAAU,KAAKkF,aAAK,SAAEC,QAAQQ,YAAY,CAC5BC,QAAS,gBACT1K,OAAQ8E,KAAKZ,aASbsG,mBAAmBP,GAEvB,MAAMU,EAAYV,EAAQW,aACtBjK,EAAO0J,IAAIC,SAASxF,KAAK+E,cAAe,QAAS,cAM/CgB,EAAiBZ,EAAQW,aAAajK,EAAO0J,IAAIC,SACnDxF,KAAK+E,cACL,QACA,cAEEiB,EAAgBb,EAAQW,aAAajK,EAAO0J,IAAIC,SAClDxF,KAAK+E,cACL,QACA,eAIEkB,GAAQ,IAAAC,YAEd,MAAO,6aAQqFf,EAAQgB,gCAAgCF,sHAEtHD,iDACAD,gJAIiBF,2BAAmCI,gF,sZC5H1E,eACA,SACA,SACA,SAEA,SAKA,gBA2BI,YAAmBlB,GACf/E,KAAK+E,cAAgBA,EAUlBC,mBAAmBC,GACtBjF,KAAKkF,MAAQD,EAEbA,EAAYE,QAAQC,QAAU,CAE1BC,eAAe,EAEfC,mBAAoB,CAChBzJ,EAAO0J,IAAIC,SAASxF,KAAK+E,cAAe,WAIhDE,EAAYE,QAAQM,KAAOzF,KAAK0F,mBAAmBT,EAAYE,SAE/DF,EAAYE,QAAQiB,qBAA2B1F,GAAS,EAAD,gCACnD,OAAQA,EAAKkF,SACT,IAAK,cACD,GAAqB,IAAjBlF,EAAKnF,UAAqC,IAAnBmF,EAAKlF,YAAqC,IAAjBkF,EAAKjF,SAErD,YADAI,EAAOO,OAAOC,iBAAiB,4BAGnC,IAAAjB,qBAAoB4E,KAAK+E,cAAerE,EAAKpF,KAAMoF,EAAKnF,SAAUmF,EAAKlF,WAAYkF,EAAKjF,SAAUiF,EAAKhF,MACvG,MAEJ,IAAK,oBACD,IAAKsE,KAAKqG,aAEN,YADAxK,EAAOO,OAAOkK,uBAAuB,sBAIzC,IAAAC,kBAAiBvG,KAAKqG,aAAalG,UAAWH,KAAKqG,aAAahI,YAAa2B,KAAKqG,aAAanG,SAC/FF,KAAKlD,oBAEL,MAEJ,IAAK,yBACD,IAAKkD,KAAKqG,aAEN,YADAxK,EAAOO,OAAOkK,uBAAuB,sBAIzC,IAAAhI,YAAW0B,KAAKqG,aAAahI,aAE7B,MAEJ,IAAK,qBACD,IAAAmI,aACA,MAEJ,IAAK,gBACD,IAAArH,WAAUuB,EAAK+F,QACfzG,KAAKlD,0BAWd6C,WAAWJ,G,MACdS,KAAKqG,aAAe9G,EAEpB,IAAI2C,GAAa,IAAAG,eAAcrC,KAAKqG,aAAahI,aAC7C4B,EAAUD,KAAKqG,aAAahG,aAEhB,KAAZJ,IACAA,GAAU,IAAAmC,aAAYF,GAAYjC,SAG5B,QAAV,EAAAD,KAAKkF,aAAK,SAAEC,QAAQQ,YAAY,CAC5BC,QAAS,gBACT3I,KAAMsC,EAAKY,UACXtB,OAAQU,EAAKlB,YACbqI,QAASzG,IAOVnD,oB,MACHkD,KAAKqG,kBAAezK,EAEV,QAAV,EAAAoE,KAAKkF,aAAK,SAAEC,QAAQQ,YAAY,CAC5BC,QAAS,0BASTF,mBAAmBP,GACvB,MAAMU,EAAYV,EAAQW,aACtBjK,EAAO0J,IAAIC,SAASxF,KAAK+E,cAAe,QAAS,eAG/CgB,EAAiBZ,EAAQW,aAAajK,EAAO0J,IAAIC,SACnDxF,KAAK+E,cACL,QACA,cAEEiB,EAAgBb,EAAQW,aAAajK,EAAO0J,IAAIC,SAClDxF,KAAK+E,cACL,QACA,eAGEkB,GAAQ,IAAAC,YAEd,MAAO,6aAQqFf,EAAQgB,gCAAgCF,sHAEtHD,iDACAD,s7EAoC8C,EAAAjI,4JAEE,EAAAC,sKAEF,EAAAC,ipCAoB7B6H,2BAAmCI,gF,iaCzO1E,eACA,SACA,SACA,SACA,SAKA,2BAkGI,YAAmB5K,GA7FH,KAAAsL,SAAW,gBAenB,KAAAC,aAAoC,GA8BpC,KAAAC,SAAmB,EAiDvB7G,KAAK+E,cAAgB1J,EA1ClB0B,cAAc1B,GACjB2E,KAAK8G,UACL,MAAMC,EAASlL,EAAOO,OAAO4K,iBACvBnL,EAAOO,OAAO4K,iBAAiBC,gBAC/BrL,EAEAsL,EAAQrL,EAAOO,OAAO+K,mBACxBnH,KAAK2G,SACL,gBACAI,GAAUlL,EAAOuL,WAAWC,IAC5B,CACIhC,eAAe,EACf1G,yBAAyB,EACzB2G,mBAAoB,CAChBzJ,EAAO0J,IAAIC,SAASnK,EAAc,YAK9C6L,EAAM/B,QAAQM,KAAOzF,KAAK0F,mBAAmBwB,EAAM/B,SACnDnF,KAAKsH,oBAAoBJ,GAEzBA,EAAMK,cAAa,IAAMvH,KAAK8G,WAAW,KAAM9G,KAAK4G,cAEpD5G,KAAKwH,OAASN,EACdlH,KAAK6G,SAAU,EA4BZlK,WAAWhB,EAAqBD,EAAcH,EAAkBC,EAAoBC,GACvFuE,KAAKrE,YAAcA,EACnBqE,KAAKtE,KAAOA,EACZsE,KAAKzE,SAAWA,EAChByE,KAAKxE,WAAaA,EAClBwE,KAAKvE,SAAWA,EAOZ6L,oBAAoBJ,GACxBA,EAAM/B,QAAQiB,qBAA2B1F,GAAS,EAAD,gCAC7C,OAAQA,EAAKkF,SACT,IAAK,gBACD,IAAKlF,EAAKzD,KACN,OAGJ,IAAIoJ,EAAe,IAAI,EAAAxE,KAAKnB,EAAK5B,GAAI4B,EAAKzD,MAC1CoJ,EAAajG,UAAUM,EAAK7B,SAE5B,IAAAc,YAAW0G,EAAc3F,EAAKlB,QAASkB,EAAKjB,UAAWiB,EAAKhB,UAE5D,MAEJ,IAAK,eACD,IAAKgB,EAAK+G,IACN,OAEJ5L,EAAOO,OAAOsL,eAAe,CAAEC,QAAS,CAAE,OAAU,CAAC,UAAYjE,MAAKV,SACrDpH,IAAToH,IACA,IAAAxG,eAAcwG,EAAK9G,OAAQ,4CAA8CwE,EAAK+G,QAItF,MAEJ,IAAK,iBACD,IAAApI,eAAcqB,EAAKxF,cAW3B4L,U,MAGJ,IAFW,QAAX,EAAA9G,KAAKwH,cAAM,SAAEV,UAEN9G,KAAK4G,aAAazE,QAAQ,CAC7B,MAAMyF,EAAI5H,KAAK4G,aAAaiB,MACxBD,GACAA,EAAEd,UAIV9G,KAAK6G,SAAU,EAOZ3J,WAAW4B,G,MACH,QAAX,EAAAkB,KAAKwH,cAAM,SAAErC,QAAQQ,YAAY,CAC7BC,QAAS,gBACT9G,GAAIA,IASL3B,WAAWF,G,MACH,QAAX,EAAA+C,KAAKwH,cAAM,SAAErC,QAAQQ,YAAY,CAC7BC,QAAS,gBACT3I,KAAMA,IAOP+B,gB,MACQ,QAAX,EAAAgB,KAAKwH,cAAM,SAAErC,QAAQQ,YAAY,CAC7BC,QAAS,sBAQVzG,UAAUsH,G,MACF,QAAX,EAAAzG,KAAKwH,cAAM,SAAErC,QAAQQ,YAAY,CAC7BC,QAAS,eACTa,OAAQA,IAQTjI,mBAAmBvB,G,MACX,QAAX,EAAA+C,KAAKwH,cAAM,SAAErC,QAAQQ,YAAY,CAC7BC,QAAS,0BACT3I,KAAMA,IAQPiC,gBACH,OAAOc,KAAK6G,QAQRnB,mBAAmBP,GACvB,MAAMU,EAAYV,EAAQW,aACtBjK,EAAO0J,IAAIC,SAASxF,KAAK+E,cAAe,QAAS,qBAG/CgB,EAAiBZ,EAAQW,aAAajK,EAAO0J,IAAIC,SACnDxF,KAAK+E,cACL,QACA,cAEEiB,EAAgBb,EAAQW,aAAajK,EAAO0J,IAAIC,SAClDxF,KAAK+E,cACL,QACA,eAGEkB,GAAQ,IAAAC,YAEd,MAAO,6aAQqFf,EAAQgB,gCAAgCF,sHAEtHD,iDACAD,iPAKwD/F,KAAKrE,6FACPqE,KAAKtE,8EACbsE,KAAKzE,mFACHyE,KAAKxE,mFACPwE,KAAKvE,oDAClCoK,2BAAmCI,iF,kBChS1E,IAAI6B,EAAkB9H,MAAQA,KAAK8H,gBAAmB,WAClD,IAAK,IAAIC,EAAI,EAAGlF,EAAI,EAAGmF,EAAKC,UAAU9F,OAAQU,EAAImF,EAAInF,IAAKkF,GAAKE,UAAUpF,GAAGV,OACxE,IAAI+F,EAAIC,MAAMJ,GAAIK,EAAI,EAA3B,IAA8BvF,EAAI,EAAGA,EAAImF,EAAInF,IACzC,IAAK,IAAIwF,EAAIJ,UAAUpF,GAAIyF,EAAI,EAAGC,EAAKF,EAAElG,OAAQmG,EAAIC,EAAID,IAAKF,IAC1DF,EAAEE,GAAKC,EAAEC,GACjB,OAAOJ,GAEXM,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IACtDD,EAAQnG,WAAQ,EAChB,IAAIA,EAAuB,WACvB,SAASA,EAAMqG,GACX,IAAIC,EAAI7I,KACR6I,EAAEC,MAAQ,GACVD,EAAEE,QAAU,GACZF,EAAE1G,OAAS,EACPyG,GACAA,EAAS9H,SAAQ,SAAUkI,EAAGZ,GAC1BS,EAAErG,IAAIwG,EAAE,GAAIA,EAAE,OA0S1B,OA9RAzG,EAAM0G,UAAUC,SAAW,SAAUC,EAAYC,GAC7C,IAAIP,EAAI7I,KACJqJ,EAAc,SAAUV,GACxB,OAAc,OAAVA,GAAmC,iBAAVA,GAAsBS,GACxC,IAAI7G,GAAQ2G,SAASP,GAAO,GACnCR,MAAMmB,QAAQX,IAAUS,EACjBT,EAAMY,KAAI,SAAUP,GAAK,OAAOK,EAAYL,MAChDL,GAOX,OALAH,OAAOgB,KAAKL,GAAYrI,SAAQ,SAAU2I,GAClCN,EAAWO,eAAeD,IAC1BZ,EAAErG,IAAIiH,EAAUJ,EAAYF,EAAWM,QAGxCZ,GAQXtG,EAAM0G,UAAUtG,OAAS,WACrB,IAAIgH,EAAM,GACNd,EAAI7I,KACJ4J,EAAW,SAAUjB,GACrB,OAAIA,aAAiBpG,EACVoG,EAAMhG,SAERwF,MAAMmB,QAAQX,GACZA,EAAMY,KAAI,SAAUP,GAAK,OAAOY,EAASZ,MAGzCL,GAMf,OAHAE,EAAEW,OAAO1I,SAAQ,SAAUsH,GACvBuB,EAAIE,OAAOzB,IAAMwB,EAASf,EAAEiB,IAAI1B,OAE7BuB,GASXpH,EAAM0G,UAAUc,QAAU,WACtB,IAAIC,EAAQhK,KACZ,MAAO,GAAGiK,MAAMC,KAAKlK,KAAKwJ,OAAOD,KAAI,SAAUnB,GAAK,MAAO,CAACA,EAAG4B,EAAMF,IAAI1B,SAS7E7F,EAAM0G,UAAUO,KAAO,WACnB,MAAO,GAAGS,MAAMC,KAAKlK,KAAK8I,QAS9BvG,EAAM0G,UAAUkB,OAAS,WACrB,MAAO,GAAGF,MAAMC,KAAKlK,KAAK+I,UAU9BxG,EAAM0G,UAAUmB,IAAM,SAAUC,GAC5B,OAAOrK,KAAK8I,MAAMwB,QAAQD,IAAQ,GAUtC9H,EAAM0G,UAAUa,IAAM,SAAUO,GAC5B,IAAIxH,EAAI7C,KAAK8I,MAAMwB,QAAQD,GAC3B,OAAOxH,GAAK,EAAI7C,KAAK+I,QAAQlG,QAAKjH,GAUtC2G,EAAM0G,UAAUsB,QAAU,SAAUC,GAChC,IAAKA,IAASA,EAAKrI,OACf,OAAO,KACX,IAAIsI,EAAe,SAAUd,EAAKa,GAC9B,OAAIb,MAAAA,EACO,KACNa,EAAKrI,OAEHsI,EAAad,aAAepH,EAAQoH,EAAIG,IAAIU,EAAK,IAAMb,EAAIa,EAAK,IAAKA,EAAKP,MAAM,IAD5EN,GAGf,OAAOc,EAAazK,KAAK8J,IAAIU,EAAK,IAAKA,EAAKP,MAAM,KAWtD1H,EAAM0G,UAAUzG,IAAM,SAAU6H,EAAK1B,GACjC,IAAIE,EAAI7I,KAEJ6C,EAAI7C,KAAK8I,MAAMwB,QAAQD,GAS3B,OARIxH,GAAK,EACLgG,EAAEE,QAAQlG,GAAK8F,GAGfE,EAAEC,MAAMnL,KAAK0M,GACbxB,EAAEE,QAAQpL,KAAKgL,GACfE,EAAE1G,OAAS0G,EAAEE,QAAQ5G,QAElBnC,MAcXuC,EAAM0G,UAAUyB,UAAY,SAAUL,EAAK1B,EAAOgC,EAAUC,GACxD,IAAI/B,EAAI7I,KACJmC,EAASnC,KAAK8I,MAAM3G,OACpB0I,EAAQF,GAAY,EACpBG,OAAiBlP,IAAXgP,EAAuBA,EAASzI,EAAS,EACnD,GAAc,GAAVA,EAGA,OAFA0G,EAAEC,MAAMnL,KAAK0M,GACbxB,EAAEE,QAAQpL,KAAKgL,GACRE,EAEX,GAAIwB,GAAOrK,KAAK8I,MAAM+B,GAElB,OADA7K,KAAK+I,QAAQ8B,GAASlC,EACf3I,KAEX,GAAIqK,GAAOrK,KAAK8I,MAAMgC,GAElB,OADA9K,KAAK+I,QAAQ+B,GAAOnC,EACb3I,KAEX,GAAIqK,EAAMrK,KAAK8I,MAAMgC,GAGjB,OAFA9K,KAAK8I,MAAMhE,OAAOgG,EAAM,EAAG,EAAGT,GAC9BrK,KAAK+I,QAAQjE,OAAOgG,EAAM,EAAG,EAAGnC,GACzB3I,KAEX,GAAIqK,EAAMrK,KAAK8I,MAAM+B,GAGjB,OAFA7K,KAAK+I,QAAQjE,OAAO+F,EAAO,EAAGlC,GAC9B3I,KAAK8I,MAAMhE,OAAO+F,EAAO,EAAGR,GACrBrK,KAEX,GAAI6K,GAASC,EACT,OAAO9K,KAEX,IAAI+K,EAAIF,EAAQvH,KAAKC,OAAOuH,EAAMD,GAAS,GAC3C,OAAIR,EAAMrK,KAAK8I,MAAMiC,GACV/K,KAAK0K,UAAUL,EAAK1B,EAAOkC,EAAOE,EAAI,GAE7CV,EAAMrK,KAAK8I,MAAMiC,GACV/K,KAAK0K,UAAUL,EAAK1B,EAAOoC,EAAI,EAAGD,GAEtC9K,MASXuC,EAAM0G,UAAU+B,KAAO,WACnB,OAAOhL,KAAKmC,QAShBI,EAAM0G,UAAUgC,MAAQ,WACpB,IAAIpC,EAAI7I,KAER,OADA6I,EAAEC,MAAM3G,OAAS0G,EAAE1G,OAAS0G,EAAEE,QAAQ5G,OAAS,EACxCnC,MAUXuC,EAAM0G,UAAUiC,OAAS,SAAUb,GAC/B,IAAIxB,EAAI7I,KACJ6C,EAAIgG,EAAEC,MAAMwB,QAAQD,GACxB,OAAIxH,GAAK,IACLgG,EAAEC,MAAMhE,OAAOjC,EAAG,GAClBgG,EAAEE,QAAQjE,OAAOjC,EAAG,GACpBgG,EAAE1G,OAAS0G,EAAEC,MAAM3G,QACZ,IAWfI,EAAM0G,UAAUnI,QAAU,SAAUqK,GAChC,IAAInB,EAAQhK,KACZA,KAAK8I,MAAMhI,SAAQ,SAAUkI,EAAGnG,GAC5BsI,EAAWnB,EAAMF,IAAId,GAAIA,EAAGnG,OAWpCN,EAAM0G,UAAUM,IAAM,SAAU4B,GAC5B,IAAInB,EAAQhK,KACZ,OAAOA,KAAKwJ,OAAOD,KAAI,SAAU6B,EAASvI,GACtC,OAAOsI,EAAWnB,EAAMF,IAAIsB,GAAUA,EAASvI,OAYvDN,EAAM0G,UAAUoC,OAAS,SAAUF,GAC/B,IAAItC,EAAI7I,KAKR,OAJA8H,EAAee,EAAEC,OAAOhI,SAAQ,SAAUkI,EAAGnG,IACN,IAA/BsI,EAAWtC,EAAEiB,IAAId,GAAIA,EAAGnG,IACxBgG,EAAEqC,OAAOlC,MAEVhJ,MAUXuC,EAAM0G,UAAUqC,MAAQ,WACpB,OAAO,IAAI/I,EAAMvC,KAAK+J,YAEnBxH,EAlTe,GAoT1BmG,EAAQnG,MAAQA,G,QC9ThBgJ,EAAO7C,QAAU8C,QAAQ,W,QCAzBD,EAAO7C,QAAU8C,QAAQ,QCCrBC,EAA2B,GCE3BC,EDCJ,SAASC,EAAoBC,GAE5B,IAAIC,EAAeJ,EAAyBG,GAC5C,QAAqBhQ,IAAjBiQ,EACH,OAAOA,EAAanD,QAGrB,IAAI6C,EAASE,EAAyBG,GAAY,CAGjDlD,QAAS,IAOV,OAHAoD,EAAoBF,GAAU1B,KAAKqB,EAAO7C,QAAS6C,EAAQA,EAAO7C,QAASiD,GAGpEJ,EAAO7C,QClBWiD,CAAoB,K","sources":["webpack://yocto-project-dependency-visualizer/./src/extension.ts","webpack://yocto-project-dependency-visualizer/./src/model/Link.ts","webpack://yocto-project-dependency-visualizer/./src/model/Node.ts","webpack://yocto-project-dependency-visualizer/./src/parser/DotParser.ts","webpack://yocto-project-dependency-visualizer/./src/parser/recipe_parser.ts","webpack://yocto-project-dependency-visualizer/./src/support/constants.ts","webpack://yocto-project-dependency-visualizer/./src/support/helpers.ts","webpack://yocto-project-dependency-visualizer/./src/tree_providers/ConnectionsTreeDataProvider.ts","webpack://yocto-project-dependency-visualizer/./src/tree_providers/NodeTreeItem.ts","webpack://yocto-project-dependency-visualizer/./src/tree_providers/RemovedTreeDataProvider.ts","webpack://yocto-project-dependency-visualizer/./src/view/Legend.ts","webpack://yocto-project-dependency-visualizer/./src/view/Sidebar.ts","webpack://yocto-project-dependency-visualizer/./src/view/VisualizationPanel.ts","webpack://yocto-project-dependency-visualizer/./node_modules/typescript-map/index.js","webpack://yocto-project-dependency-visualizer/external commonjs \"vscode\"","webpack://yocto-project-dependency-visualizer/external node-commonjs \"fs\"","webpack://yocto-project-dependency-visualizer/webpack/bootstrap","webpack://yocto-project-dependency-visualizer/webpack/startup"],"sourcesContent":["import * as vscode from 'vscode';\r\nimport { Sidebar } from './view/Sidebar';\r\nimport { existsSync, writeFileSync } from 'fs';\r\nimport { DotParser } from './parser/DotParser';\r\nimport { VisualizationPanel } from './view/VisualizationPanel';\r\nimport { RemovedTreeDataProvider } from \"./tree_providers/RemovedTreeDataProvider\"\r\nimport { Node } from './model/Node';\r\nimport { DEFAULT_DISTANCE, DEFAULT_ITERATIONS, DEFAULT_MODE, DEFAULT_STRENGTH, DEFAULT_TYPE } from './support/constants';\r\nimport { getRecipePath, openRecipe } from './support/helpers';\r\nimport { NodeTreeItem } from './tree_providers/NodeTreeItem';\r\nimport { ConnectionsTreeDataProvider } from './tree_providers/ConnectionsTreeDataProvider';\r\nimport { Legend } from './view/Legend';\r\n\r\n/**\r\n * Tree data provider for removed nodes TreeView\r\n */\r\nvar removedTreeDataProvider: RemovedTreeDataProvider;\r\n\r\n/**\r\n * Tree data provider for nodes that depend on the selected node TreeView\r\n */\r\nvar usedByTreeDataProvider: ConnectionsTreeDataProvider;\r\n\r\n/**\r\n * Tree data provider for nodes that the selected node depends on TreeView\r\n */\r\nvar requestedTreeDataProvider: ConnectionsTreeDataProvider;\r\n\r\n/**\r\n * Tree data provider for affected nodes TreeView\r\n */\r\nvar affectedTreeDataProvider: ConnectionsTreeDataProvider;\r\n\r\n/**\r\n * Sidebar menu\r\n */\r\nvar sidebar: Sidebar;\r\n\r\n/**\r\n * Legend in the sidebar\r\n */\r\nvar legend: Legend;\r\n\r\n/**\r\n * Main visualization panel\r\n */\r\nvar visualizationPanel: VisualizationPanel;\r\n\r\n/**\r\n * Activate the extension. Register commands and views.\r\n * @param context Extension context.\r\n */\r\nexport function activate(context: vscode.ExtensionContext) {\r\n\tsidebar = new Sidebar(context.extensionUri);\r\n\tlegend = new Legend(context.extensionUri);\r\n\tvisualizationPanel = new VisualizationPanel(context.extensionUri);\r\n\r\n\tremovedTreeDataProvider = new RemovedTreeDataProvider();\r\n\tusedByTreeDataProvider = new ConnectionsTreeDataProvider();\r\n\trequestedTreeDataProvider = new ConnectionsTreeDataProvider();\r\n\taffectedTreeDataProvider = new ConnectionsTreeDataProvider();\r\n\r\n\tcontext.subscriptions.push(\r\n\t\tvscode.commands.registerCommand('yocto-project-dependency-visualizer.generateVisualization', () => {\r\n\t\t\tcreateVizualization(context.extensionUri, DEFAULT_TYPE, DEFAULT_DISTANCE, DEFAULT_ITERATIONS, DEFAULT_STRENGTH, DEFAULT_MODE);\r\n\t\t})\r\n\t);\r\n\tcontext.subscriptions.push(\r\n\t\tvscode.commands.registerCommand('yocto-project-dependency-visualizer.returnNode', (item: NodeTreeItem) => {\r\n\t\t\tif (item.label?.toString() !== undefined) {\r\n\t\t\t\treturnToVisualization(item.label.toString());\r\n\t\t\t}\r\n\t\t})\r\n\t);\r\n\tcontext.subscriptions.push(\r\n\t\tvscode.commands.registerCommand('yocto-project-dependency-visualizer.openRecipe', (item: NodeTreeItem) => {\r\n\t\t\tif (item.getRecipe()?.toString() !== undefined) {\r\n\t\t\t\topenRecipe(item.getRecipe())\r\n\t\t\t}\r\n\t\t})\r\n\t);\r\n\tcontext.subscriptions.push(\r\n\t\tvscode.commands.registerCommand('yocto-project-dependency-visualizer.selectNodeFromList', (item: NodeTreeItem) => {\r\n\t\t\tif (item.isRemoved() === 1) {\r\n\t\t\t\tvscode.window.showErrorMessage(\"Node is in the \\\"Removed nodes\\\" list so it cannot be selected!\");\r\n\t\t\t}\r\n\t\t\telse if (item.label?.toString() !== undefined) {\r\n\t\t\t\tselectNodeFromList(item.label.toString());\r\n\t\t\t}\r\n\t\t})\r\n\t);\r\n\tcontext.subscriptions.push(\r\n\t\tvscode.window.registerWebviewViewProvider(\r\n\t\t\t\"visualization-sidebar\",\r\n\t\t\tsidebar,\r\n\t\t\t{\r\n\t\t\t\twebviewOptions:\r\n\t\t\t\t{\r\n\t\t\t\t\tretainContextWhenHidden: true\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t)\r\n\t);\r\n\tcontext.subscriptions.push(\r\n\t\tvscode.window.registerWebviewViewProvider(\r\n\t\t\t\"visualization-legend\",\r\n\t\t\tlegend,\r\n\t\t\t{\r\n\t\t\t\twebviewOptions:\r\n\t\t\t\t{\r\n\t\t\t\t\tretainContextWhenHidden: true\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t)\r\n\t);\r\n\tcontext.subscriptions.push(\r\n\t\tvscode.window.registerTreeDataProvider(\r\n\t\t\t\"removed-list\",\r\n\t\t\tremovedTreeDataProvider\r\n\t\t)\r\n\t);\r\n\tcontext.subscriptions.push(\r\n\t\tvscode.window.registerTreeDataProvider(\r\n\t\t\t\"used-by-list\",\r\n\t\t\tusedByTreeDataProvider\r\n\t\t)\r\n\t);\r\n\tcontext.subscriptions.push(\r\n\t\tvscode.window.registerTreeDataProvider(\r\n\t\t\t\"requested-list\",\r\n\t\t\trequestedTreeDataProvider\r\n\t\t)\r\n\t);\r\n\tcontext.subscriptions.push(\r\n\t\tvscode.window.registerTreeDataProvider(\r\n\t\t\t\"affected-list\",\r\n\t\t\taffectedTreeDataProvider\r\n\t\t)\r\n\t);\r\n\r\n\tvscode.commands.executeCommand('setContext', 'showAffected', false);\r\n\tvscode.commands.executeCommand('setContext', 'showLegend', false);\r\n}\r\n\r\n// Example how BitBake could be called\r\n//function callBitbake(path: string) {\r\n//\t// use linux cd\r\n//\tcp.exec('pushd' + path + \" && dir\", (err: any, stdout: any, stderr: any) => {\r\n//\t\tconsole.log('stdout: ' + stdout);\r\n//\t\tconsole.log('stderr: ' + stderr);\r\n//\t\tif (err) {\r\n//\t\t\tconsole.log('error: ' + err);\r\n//\t\t}\r\n//\t});\r\n//}\r\n\r\n/**\r\n * Select node from the list of requested or used by nodes.\r\n * @param name Name of the node that will be selected.\r\n */\r\nfunction selectNodeFromList(name: string) {\r\n\tvisualizationPanel.selectNodeFromList(name);\r\n}\r\n\r\n/**\r\n * Create and show visualization.\r\n * @param extensionUri Extension URI.\r\n * @param type Type of the BitBake task.\r\n * @param distance Distance between the nodes (for the force directed algorithm).\r\n * @param iterations Number of iterations (for the force directed algorithm).\r\n * @param strength Strength of the force between nodes (for the force directed algorithm).\r\n * @param mode Mode of analysis.\r\n * @returns void\r\n */\r\nexport function createVizualization(extensionUri: vscode.Uri, type: string, distance: number, iterations: number, strength: number, mode: string): void {\r\n\tvar graphString = \"\";\r\n\tif (vscode.workspace.workspaceFolders !== undefined) {\r\n\t\tconst dotPath = vscode.workspace.workspaceFolders[0].uri.fsPath + \"/build/task-depends.dot\";\r\n\t\tif (!existsSync(dotPath)) {\r\n\t\t\t//callBitbake(vscode.workspace.workspaceFolders[0].uri.fsPath);\r\n\t\t\tvscode.window.showErrorMessage(\".dot file not found in first workspace folder! Make sure Yocto Project directory is in the first folder of the workspace!\");\r\n\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tvar dotParser = new DotParser(dotPath);\r\n\t\tgraphString = dotParser.parseDotFile(type, mode);\r\n\t\twriteFileSync(vscode.workspace.workspaceFolders[0].uri.fsPath + \"/build/graph.json\", graphString);\r\n\t}\r\n\r\n\tif (graphString === \"\") {\r\n\t\tvscode.window.showErrorMessage(\"No graph data loaded!\");\r\n\r\n\t\treturn;\r\n\t}\r\n\r\n\tif (mode === \"affected_nodes\") {\r\n\t\tvscode.commands.executeCommand('setContext', 'showAffected', true);\r\n\t}\r\n\telse {\r\n\t\tvscode.commands.executeCommand('setContext', 'showAffected', false);\r\n\t}\r\n\tif (mode === \"licenses\") {\r\n\t\tvscode.commands.executeCommand('setContext', 'showLegend', true);\r\n\t}\r\n\telse {\r\n\t\tvscode.commands.executeCommand('setContext', 'showLegend', false);\r\n\t}\r\n\r\n\tvisualizationPanel.updateData(graphString, mode, distance, iterations, strength);\r\n\r\n\tremovedTreeDataProvider.clearAllNodes();\r\n\tremovedTreeDataProvider.refresh();\r\n\r\n\tsidebar.clearSelectedNode();\r\n\r\n\tusedByTreeDataProvider.clearAllNodes();\r\n\trequestedTreeDataProvider.clearAllNodes();\r\n\taffectedTreeDataProvider.clearAllNodes();\r\n\r\n\tusedByTreeDataProvider.refresh();\r\n\trequestedTreeDataProvider.refresh();\r\n\taffectedTreeDataProvider.refresh();\r\n\r\n\tvisualizationPanel.createAndShow(extensionUri);\r\n}\r\n\r\n/**\r\n * Add node to the removed nodes TreeView.\r\n * @param name Name of the node to be removed.\r\n * @param recipe Path to the recipe of the node to be removed.\r\n * @param id ID of the node to be removed.\r\n */\r\nexport function addNodeToRemoved(name: string, recipe: string, id: number) {\r\n\tremovedTreeDataProvider.addNode(name, recipe);\r\n\tremovedTreeDataProvider.refresh();\r\n\tvisualizationPanel.removeNode(id);\r\n\r\n\tusedByTreeDataProvider.clearAllNodes();\r\n\trequestedTreeDataProvider.clearAllNodes();\r\n\taffectedTreeDataProvider.clearAllNodes();\r\n\r\n\tusedByTreeDataProvider.refresh();\r\n\trequestedTreeDataProvider.refresh();\r\n\taffectedTreeDataProvider.refresh();\r\n}\r\n\r\n/**\r\n * Return node from the TreeView of removed nodes back to visualization.\r\n * @param name Name of the node to be removed.\r\n */\r\nexport function returnToVisualization(name: string) {\r\n\tremovedTreeDataProvider.removeNode(name);\r\n\tremovedTreeDataProvider.refresh();\r\n\r\n\tsidebar.clearSelectedNode();\r\n\r\n\tusedByTreeDataProvider.clearAllNodes();\r\n\trequestedTreeDataProvider.clearAllNodes();\r\n\taffectedTreeDataProvider.clearAllNodes();\r\n\r\n\tusedByTreeDataProvider.refresh();\r\n\trequestedTreeDataProvider.refresh();\r\n\taffectedTreeDataProvider.refresh();\r\n\r\n\tvisualizationPanel.returnNode(name);\r\n}\r\n\r\n/**\r\n * Export the visualization SVG.\r\n */\r\nexport function exportSVG() {\r\n\tvisualizationPanel.callExportSVG();\r\n}\r\n\r\n/**\r\n * Find nodes in visualization with a given search string.\r\n * @param seach String which should be used to search for nodes.\r\n */\r\nexport function findNodes(seach: string) {\r\n\tif (seach == \"\") {\r\n\t\tvscode.window.showErrorMessage(\"Empty string cannot be used for search of nodes!\");\r\n\r\n\t\treturn;\r\n\t}\r\n\tif (!visualizationPanel.isWindowShown()) {\r\n\t\tvscode.window.showErrorMessage(\"No visualization available!\");\r\n\r\n\t\treturn;\r\n\t}\r\n\r\n\tusedByTreeDataProvider.clearAllNodes();\r\n\trequestedTreeDataProvider.clearAllNodes();\r\n\taffectedTreeDataProvider.clearAllNodes();\r\n\r\n\tusedByTreeDataProvider.refresh();\r\n\trequestedTreeDataProvider.refresh();\r\n\taffectedTreeDataProvider.refresh();\r\n\r\n\tvisualizationPanel.findNodes(seach);\r\n}\r\n\r\n/**\r\n * Set data for the legend.\r\n * @param legendData Legend data to be set.\r\n */\r\nexport function setLegendData(legendData: { license: string; color: string; }[]) {\r\n\tlegend.setLegendData(legendData);\r\n\tlegend.showLegend();\r\n}\r\n\r\n/**\r\n * Select node from visualization.\r\n * @param node Node to be selected.\r\n * @param used_by List of nodes that request the selected node.\r\n * @param requested List of nodes that the selected node reauests.\r\n * @param affected List of node directly or inderectly depenedent on the selected node.\r\n */\r\nexport function selectNode(node: Node, used_by: { name: string; recipe: string; is_removed: number; }[],\r\n\trequested: { name: string; recipe: string; is_removed: number; }[], affected: { name: string; recipe: string; is_removed: number; }[]) {\r\n\tsidebar.selectNode(node);\r\n\r\n\tusedByTreeDataProvider.clearAllNodes();\r\n\trequestedTreeDataProvider.clearAllNodes();\r\n\taffectedTreeDataProvider.clearAllNodes();\r\n\r\n\tusedByTreeDataProvider.updateNodes(used_by);\r\n\trequestedTreeDataProvider.updateNodes(requested);\r\n\taffectedTreeDataProvider.updateNodes(affected);\r\n\r\n\tusedByTreeDataProvider.refresh();\r\n\trequestedTreeDataProvider.refresh();\r\n\taffectedTreeDataProvider.refresh();\r\n}\r\n","import { GraphElement } from \"./GraphElement\";\r\n\r\n/**\r\n * Class representing a link in the graph.\r\n */\r\nexport class Link implements GraphElement {\r\n\r\n    /**\r\n     * ID of the source recipe node.\r\n     */\r\n    private source: number;\r\n\r\n    /**\r\n     * ID of the target recipe node.\r\n     */\r\n    private target: number;\r\n\r\n    /**\r\n     * Create an instance representing a connection.\r\n     * @param source ID of the source recipe node.\r\n     * @param target ID of the target recipe node.\r\n     */\r\n    constructor(source: number, target: number) {\r\n        this.source = source;\r\n        this.target = target;\r\n    }\r\n}","import { GraphElement } from \"./GraphElement\";\r\n\r\n/**\r\n * Class representing a recipe (node) in the graph.\r\n */\r\nexport class Node implements GraphElement {\r\n\r\n    /**\r\n     * ID of the node.\r\n     */\r\n    private id: number;\r\n\r\n    /**\r\n     * Name of the recipe representing a node.\r\n     */\r\n    private name: string;\r\n\r\n    /**\r\n     * Path of the recipe.\r\n     */\r\n    private recipe: string;\r\n\r\n    /**\r\n     * License used in the recipe.\r\n     */\r\n    private license: string;\r\n\r\n    /**\r\n     * Create an instance representing a recipe (node) in the graph.\r\n     * @param id ID of the node.\r\n     * @param name Name of the node.\r\n     */\r\n    constructor(id: number, name: string) {\r\n        this.id = id;\r\n        this.name = name;\r\n        this.recipe = \"\";\r\n        this.license = \"\";\r\n    }\r\n\r\n    /**\r\n     * Return an ID of the node.\r\n     * @returns ID of the node.\r\n     */\r\n    public getId(): number {\r\n        return this.id;\r\n    }\r\n    \r\n    /**\r\n     * Return a name of the node.\r\n     * @returns Name of the node.\r\n     */\r\n    public getName(): string {\r\n        return this.name;\r\n    }\r\n\r\n    /**\r\n     * Return a recipe of the node.\r\n     * @returns Recipe of the node.\r\n     */\r\n    public getRecipe(): string {\r\n        return this.recipe;\r\n    }\r\n\r\n    /**\r\n     * Set path to the recipe.\r\n     * @param recipe Path to the recipe.\r\n     */\r\n    public setRecipe(recipe: string) {\r\n        this.recipe = recipe;\r\n    }\r\n    \r\n    /**\r\n     * Return a license used by the node.\r\n     * @returns Used license of the node.\r\n     */\r\n    public getLicense(): string {\r\n        return this.license;\r\n    }\r\n\r\n     /**\r\n     * Set used license.\r\n     * @param license Used license.\r\n     */\r\n    public setLicense(license: string) {\r\n        this.license = license;\r\n    }  \r\n}","import { TSMap } from \"typescript-map\";\r\nimport { DEFAULT_TYPE } from \"../support/constants\";\r\nimport { loadFile, getRecipePath } from \"../support/helpers\";\r\nimport { GraphElement } from \"../model/GraphElement\";\r\nimport { Link } from \"../model/Link\";\r\nimport { Node } from \"../model/Node\";\r\nimport { parseRecipe } from \"./recipe_parser\";\r\n\r\n/**\r\n * Class used for parsing BitBake generated .dot files.\r\n */\r\nexport class DotParser {\r\n\r\n    /**\r\n     * Path to the .dot file.\r\n     */\r\n    private dotPath: string;\r\n\r\n    /**\r\n     * Initialize DotParser class instance.\r\n     * @param dotPath Path to the .dot file.\r\n     */\r\n    public constructor(dotPath: string) {\r\n        this.dotPath = dotPath;\r\n    }\r\n\r\n    /**\r\n     * Parse a .dot file based on given parameters.\r\n     * @param type Type of the BitBake task that will be parsed.\r\n     * @param mode Mode of graph analysis.\r\n     * @returns JSON string with data for visualization.\r\n     */\r\n    public parseDotFile(type: string, mode: string): string {\r\n        var graphString;\r\n\r\n        if (type === DEFAULT_TYPE) {\r\n            graphString = this.parseDotFileDefault(mode);\r\n        }\r\n        else {\r\n            graphString = this.parseDotFileTaskType(type, mode);\r\n        }\r\n\r\n        return graphString;\r\n    }\r\n\r\n    /**\r\n     * Parse .dot file if \"default\" BitBake task type was selected (uses \".do_prepare_recipe_sysroot\" on the left side and \".do_populate_sysroot\" on the right side).\r\n     * @param mode Mode of graph analysis.\r\n     * @returns JSON string with data for visualization.\r\n     */\r\n    public parseDotFileDefault(mode: string): string {\r\n        var index = 1;\r\n        var data = loadFile(this.dotPath);\r\n        var nodes: Array<GraphElement> = [];\r\n        var links: Array<GraphElement> = [];\r\n\r\n        data?.forEach(line => {\r\n            var lineData = line.split(\" -> \");\r\n            if (lineData[0].includes(\"do_prepare_recipe_sysroot\") && !lineData[0].includes(\"label=\") && lineData[1].includes(\"do_populate_sysroot\")) {\r\n                const recipeName = lineData[0].replace(\".do_prepare_recipe_sysroot\", \"\").replace('\"', \"\").replace('\"', \"\").trim();\r\n                const dependentRecipeName = lineData[1].replace(\".do_populate_sysroot\", \"\").replace('\"', \"\").replace('\"', \"\").trim();\r\n                if (dependentRecipeName !== recipeName) {\r\n                    index = this.addGraphData(nodes, links, recipeName, dependentRecipeName, index);\r\n                }\r\n            }\r\n            else if (lineData[0].includes(\"label=\")) {\r\n                lineData = line.split(\" \");\r\n\r\n                const recipeNameData = lineData[0].split(\".\");\r\n                const recipeName = recipeNameData[0].replace('\"', \"\").replace('\"', \"\").trim();\r\n\r\n                index = this.setNodeRecipe(nodes, lineData[2], recipeName, index, mode);\r\n            }\r\n        });\r\n\r\n        return this.generateGraphJSON(nodes, links);\r\n    }\r\n\r\n    /**\r\n     * Parse BitBake .dot file. Uses only lines that have the specified type on the left side.\r\n     * @param type Type of the BitBake task that will be parsed.\r\n     * @param mode Mode of graph analysis.\r\n     * @returns JSON string with data for visualization.\r\n     */\r\n    public parseDotFileTaskType(type: string, mode: string): string {\r\n        var index = 1;\r\n        var data = loadFile(this.dotPath);\r\n        var nodes: Array<GraphElement> = [];\r\n        var links: Array<GraphElement> = [];\r\n\r\n        data?.forEach(line => {\r\n            var lineData = line.split(\" -> \");\r\n            if (lineData[0].includes(type) && !lineData[0].includes(\"label=\")) {\r\n                const recipeName = lineData[0].replace(\".\" + type, \"\").replace('\"', \"\").replace('\"', \"\").trim();\r\n                const dependentRecipeName = lineData[1].split(\".\")[0].replace('\"', \"\").replace('\"', \"\").trim();\r\n                if (dependentRecipeName !== recipeName) {\r\n                    index = this.addGraphData(nodes, links, recipeName, dependentRecipeName, index);\r\n                }\r\n            }\r\n            else if (lineData[0].includes(\"label=\")) {\r\n                lineData = line.split(\" \");\r\n\r\n                const recipeNameData = lineData[0].split(\".\");\r\n                const recipeName = recipeNameData[0].replace('\"', \"\").replace('\"', \"\").trim();\r\n\r\n                index = this.setNodeRecipe(nodes, lineData[2], recipeName, index, mode);\r\n            }\r\n        });\r\n\r\n        return this.generateGraphJSON(nodes, links);\r\n    }\r\n\r\n    /**\r\n     * Add new nodes and links to the list of nodes and links.\r\n     * @param nodes List of nodes.\r\n     * @param links List of links.\r\n     * @param recipeName Name of the first recipe.\r\n     * @param dependentRecipeName Name of the second recipe.\r\n     * @param index Index of the node in the list of nodes.\r\n     * @returns New index.\r\n     */\r\n    private addGraphData(nodes: Array<GraphElement>, links: Array<GraphElement>, recipeName: string, dependentRecipeName: string, index: number): number {\r\n        var source;\r\n        var target;\r\n\r\n        if (!nodes.some(rn => (rn as Node).getName() == recipeName)) {\r\n            nodes.push(new Node(index, recipeName));\r\n            source = index;\r\n            index++;\r\n        }\r\n        else {\r\n            source = (nodes.find(rn => (rn as Node).getName() == recipeName) as Node).getId();\r\n        }\r\n\r\n        if (!nodes.some(rn => (rn as Node).getName() == dependentRecipeName)) {\r\n            nodes.push(new Node(index, dependentRecipeName));\r\n            target = index;\r\n            index++;\r\n        }\r\n        else {\r\n            target = (nodes.find(rn => (rn as Node).getName() == dependentRecipeName) as Node).getId();\r\n        }\r\n        const link = new Link(source, target);\r\n        links.push(link);\r\n\r\n        return index;\r\n    }\r\n\r\n    /**\r\n     * Assing a path to the recipe file for a specified node or for a newly created one.\r\n     * @param nodes List of nodes.\r\n     * @param labelSource Label string.\r\n     * @param recipeName Name of the recipe.\r\n     * @param index Index of the node in the list of nodes.\r\n     * @param mode Mode of graph analysis.\r\n     * @returns New index.\r\n     */\r\n    private setNodeRecipe(nodes: Array<GraphElement>, labelSource: string, recipeName: string, index: number, mode: string): number {\r\n        var label = labelSource.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"label=\", \"\").replace('\"', \"\").replace('\"', \"\").trim();\r\n\r\n        var labelData = label.split(/\\\\n|:/);\r\n        var recipePath = labelData[labelData.length - 1];\r\n\r\n        if (!nodes.some(rn => (rn as Node).getName() == recipeName)) {\r\n            const node = new Node(index, recipeName);\r\n            node.setRecipe(recipePath);\r\n            if (mode === \"licenses\") {\r\n                node.setLicense(parseRecipe(getRecipePath(recipePath)).license);\r\n            }\r\n            nodes.push(node);\r\n            index++;\r\n        }\r\n        else {\r\n            const node = (nodes.find(rn => (rn as Node).getName() == recipeName) as Node);\r\n            node.setRecipe(recipePath);\r\n            if (mode === \"licenses\") {\r\n                node.setLicense(parseRecipe(getRecipePath(recipePath)).license);\r\n            }\r\n        }\r\n\r\n        return index;\r\n    }\r\n\r\n    /**\r\n     * Generate a JSON string containing list of nodes and list of links.\r\n     * @param nodes List of nodes.\r\n     * @param links List of links.\r\n     * @returns JSON string with data for visualization.\r\n     */\r\n    private generateGraphJSON(nodes: GraphElement[], links: GraphElement[]): string {\r\n        var graph = new TSMap<string, Array<GraphElement>>();\r\n        graph.set(\"nodes\", nodes);\r\n        graph.set(\"links\", links);\r\n\r\n        return JSON.stringify(graph.toJSON());\r\n    }\r\n\r\n}\r\n","import { loadFile } from \"../support/helpers\";\r\n\r\n/**\r\n * Parse a recipe file and return a dictionary with license information.\r\n * @param recipe Path to the recipe file.\r\n * @returns Dictionary with license information.\r\n */\r\nexport function parseRecipe(recipe: string): { [name: string]: string } {\r\n    var additionalInfo: { [name: string]: string } = {};\r\n    var data = loadFile(recipe);\r\n\r\n    additionalInfo.license = \"none\";\r\n\r\n    if (!data) {\r\n        return additionalInfo;\r\n    }\r\n\r\n    for (var i = 0; i < data.length; i++) {\r\n        var line = data[i];\r\n        var lineData = line.split(\"=\");\r\n        if (lineData.length > 1) {\r\n            if (lineData[0].trim() === \"LICENSE\") {\r\n                additionalInfo.license = lineData[1].replace('\"', \"\").replace('\"', \"\").trim();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    return additionalInfo;\r\n}","/**\r\n * Default value for the selected BitBake task.\r\n */\r\nexport const DEFAULT_TYPE: string = \"default\";\r\n\r\n/**\r\n * Default mode of analysis.\r\n */\r\nexport const DEFAULT_MODE: string = \"default\";\r\n\r\n/**\r\n * Default distance for the simulation algorithm.\r\n */\r\nexport const DEFAULT_DISTANCE: number = 400;\r\n\r\n/**\r\n * Default number of iterations for the simulation algorithm.\r\n */\r\nexport const DEFAULT_ITERATIONS: number = 1;\r\n\r\n/**\r\n * Default strength for the simulation algorithm.\r\n */\r\nexport const DEFAULT_STRENGTH: number = -3500;","import { readFileSync } from \"fs\";\r\nimport * as vscode from 'vscode';\r\n\r\n/**\r\n * Load data from a specified file and return them as a list of lines.\r\n * @param file File to be opened.\r\n * @returns List of lines (strings).\r\n */\r\nexport function loadFile(file: string): string[] | undefined {\r\n    var data;\r\n    try {\r\n        data = readFileSync(file, \"utf8\");\r\n    }\r\n    catch (err) {\r\n        data = undefined;\r\n    }\r\n\r\n    return data?.split(\"\\n\");\r\n}\r\n\r\n/**\r\n * Get correct path to the recipe file (used for WSLv2 functionality). \r\n * @param recipe Path to recipe.\r\n * @returns Correct path to recipe.\r\n */\r\nexport function getRecipePath(recipe: string): string {\r\n    var recipePath = recipe;\r\n\r\n    if (vscode.workspace.workspaceFolders !== undefined) {\r\n        const workspacePath = vscode.workspace.workspaceFolders[0].uri.fsPath;\r\n        if (workspacePath.includes(\"wsl\")) {\r\n            const pathData = workspacePath.replace(\"\\\\\\\\\", \"\").split(\"\\\\\");\r\n            recipePath = \"\\\\\\\\\" + pathData[0] + \"\\\\\" + pathData[1] + \"\\\\\" + recipe.replace(\"/\", \"\\\\\");\r\n        }\r\n    }\r\n\r\n    return recipePath;\r\n}\r\n\r\n/**\r\n * Generated nonce to be used for loading JS file in HTML.\r\n * @returns Nonce string.\r\n */\r\nexport function getNonce(): string {\r\n    const possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n\r\n    var text = '';\r\n    for (let i = 0; i < 32; i++) {\r\n        text += possible.charAt(Math.floor(Math.random() * possible.length));\r\n    }\r\n\r\n    return text;\r\n}\r\n\r\n/**\r\n * Opens a recipe file.\r\n * @param recipe Path to recipe.\r\n */\r\nexport function openRecipe(recipe: string) {\r\n    var recipePath = getRecipePath(recipe);\r\n\r\n    vscode.workspace.openTextDocument(recipePath).then(\r\n        document => vscode.window.showTextDocument(document),\r\n        () => vscode.window.showErrorMessage(\"Recipe file cannot be opened!\"));\r\n}","import * as vscode from 'vscode';\r\nimport { NodeTreeItem } from './NodeTreeItem';\r\n\r\n/**\r\n * TreeProvider class for a TreeView of requested and used-by nodes from visualization.\r\n */\r\nexport class ConnectionsTreeDataProvider implements vscode.TreeDataProvider<NodeTreeItem> {\r\n\r\n    /**\r\n     * Action executed when TreeView data changed.\r\n     */\r\n    private _onDidChangeTreeData: vscode.EventEmitter<NodeTreeItem | undefined | void> = new vscode.EventEmitter<NodeTreeItem | undefined | void>();\r\n\treadonly onDidChangeTreeData: vscode.Event<NodeTreeItem | undefined | void> = this._onDidChangeTreeData.event;\r\n\r\n    /**\r\n     * Data to be shown in the TreeView.\r\n     */\r\n    private data: NodeTreeItem[];\r\n\r\n    /**\r\n     * Inititalizes the provider.\r\n     */\r\n    public constructor() {\r\n        this.data = [];\r\n    }\r\n\r\n    /**\r\n     * Refresh the TreeViev.\r\n     */\r\n    public refresh(): void {\r\n\t\tthis._onDidChangeTreeData.fire();\r\n\t}\r\n\r\n    /**\r\n     * Get the tree item (implemented because it is required by the interface).\r\n     * @param element Element that is also returned.\r\n     * @returns \r\n     */\r\n    public getTreeItem(element: NodeTreeItem): vscode.TreeItem | Thenable<vscode.TreeItem> {\r\n        return element;\r\n    }\r\n\r\n    /**\r\n     * Get a list of childer of the element.\r\n     * @returns All data elements as there is only one layer in the tree.\r\n     */\r\n    public getChildren(element?: NodeTreeItem | undefined): vscode.ProviderResult<NodeTreeItem[]> {\r\n        //if (element === undefined) {\r\n        //    return this.data;\r\n        //}\r\n        //return element.children;\r\n\r\n        return this.data;\r\n    }\r\n\r\n    /**\r\n     * Adds new nodes to the TreeView.\r\n     * @param nodeData List of nodes to be added.\r\n     */\r\n    public updateNodes(nodeData: { name: string; recipe: string; is_removed: number; }[]) {\r\n        nodeData.forEach(node => {\r\n            this.data.push(new NodeTreeItem(node.name, node.recipe, node.is_removed));\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Clear the list of nodes.\r\n     */\r\n    public clearAllNodes() {\r\n        this.data = [];\r\n    }\r\n}","import * as vscode from 'vscode';\r\n\r\n/**\r\n * Class representing an recipe (node) in the TreeView.\r\n */\r\nexport class NodeTreeItem extends vscode.TreeItem {\r\n\r\n    /**\r\n     * Path to the recipe.\r\n     */\r\n    private recipe: string;\r\n\r\n    /**\r\n     * Stores of recipe (node) is removed from the visualization.\r\n     */\r\n    private is_removed: number;\r\n\r\n    /**\r\n     * Create an instance representing an recipe (node) in the TreeView.\r\n     * @param label Name of the item in the TreeView.\r\n     * @param recipe Path to the recipe.\r\n     * @param is_removed Stores of recipe (node) is removed from the visualization.\r\n     */\r\n    public constructor(label: string, recipe: string, is_removed: number) {\r\n        super(\r\n            label,\r\n            vscode.TreeItemCollapsibleState.None)\r\n        this.recipe = recipe;\r\n        this.is_removed = is_removed;\r\n        this.tooltip = this.recipe;\r\n    }\r\n\r\n    /**\r\n     * Return if node is removed from the visualization.\r\n     * @returns 1 if node is removed from the visualization.\r\n     */\r\n    public isRemoved(): number {\r\n        return this.is_removed;\r\n    }\r\n\r\n    /**\r\n     * Get the path to the recipe.\r\n     * @returns Path to the recipe.\r\n     */\r\n    public getRecipe(): string {\r\n        return this.recipe;\r\n    }\r\n}","import * as vscode from 'vscode';\r\nimport { NodeTreeItem } from './NodeTreeItem';\r\n\r\n/**\r\n * TreeProvider class for a TreeView of nodes removed from visualization.\r\n */\r\nexport class RemovedTreeDataProvider implements vscode.TreeDataProvider<NodeTreeItem> {\r\n\r\n    /**\r\n     * Action executed when TreeView data changed.\r\n     */\r\n    private _onDidChangeTreeData: vscode.EventEmitter<NodeTreeItem | undefined | void> = new vscode.EventEmitter<NodeTreeItem | undefined | void>();\r\n\treadonly onDidChangeTreeData: vscode.Event<NodeTreeItem | undefined | void> = this._onDidChangeTreeData.event;\r\n\r\n    /**\r\n     * Data to be shown in the TreeView.\r\n     */\r\n    private data: NodeTreeItem[];\r\n\r\n    /**\r\n     * Inititalizes the provider.\r\n     */\r\n    public constructor() {\r\n        this.data = [];\r\n    }\r\n\r\n    /**\r\n     * Refresh the TreeViev.\r\n     */\r\n    public refresh(): void {\r\n\t\tthis._onDidChangeTreeData.fire();\r\n\t}\r\n\r\n    /**\r\n     * Get the tree item (implemented because it is required by the interface).\r\n     * @param element Element that is also returned.\r\n     * @returns \r\n     */\r\n    public getTreeItem(element: NodeTreeItem): vscode.TreeItem | Thenable<vscode.TreeItem> {\r\n        return element;\r\n    }\r\n\r\n    /**\r\n     * Get a list of childer of the element.\r\n     * @returns All data elements as there is only one layer in the tree.\r\n     */\r\n    public getChildren(element?: NodeTreeItem | undefined): vscode.ProviderResult<NodeTreeItem[]> {\r\n        //if (element === undefined) {\r\n        //    return this.data;\r\n        //}\r\n        //return element.children;\r\n\r\n        return this.data;\r\n    }\r\n\r\n    /**\r\n     * Adds a new node to the list of removed nodes.\r\n     * @param label Name of the recipe.\r\n     * @param recipe Path to the recipe file.\r\n     */\r\n    public addNode(label: string, recipe: string) {\r\n        this.data.push(new NodeTreeItem(label, recipe, 0));\r\n    }\r\n\r\n    /**\r\n     * Remove node from the list of removed nodes.\r\n     * @param label Name of the node to be removed.\r\n     */\r\n    public removeNode(label: string) {\r\n        var index = this.data.findIndex((node) => node.label === label);\r\n        this.data.splice(index, 1);\r\n    }\r\n\r\n    /**\r\n     * Clear the list of nodes.\r\n     */\r\n    public clearAllNodes() {\r\n        this.data = [];\r\n    }\r\n}","import * as vscode from \"vscode\";\r\nimport { getNonce } from \"../support/helpers\";\r\nimport { Node } from \"../model/Node\";\r\n\r\n/**\r\n * Class representing a legend in the sidebar.\r\n */\r\nexport class Legend implements vscode.WebviewViewProvider {\r\n\r\n    /**\r\n     * Current WebViewView.\r\n     */\r\n    _view?: vscode.WebviewView;\r\n    //_doc?: vscode.TextDocument;\r\n\r\n    /**\r\n     * Extension URI.\r\n     */\r\n    private readonly _extensionUri: vscode.Uri;\r\n    \r\n    /**\r\n     * List of legend elements with name of the license and a color which should be used\r\n     * for the legend. \r\n     */\r\n    private legendData: { license: string; color: string; }[]\r\n\r\n    //public revive(panel: vscode.WebviewView) {\r\n    //    this._view = panel;\r\n    //}\r\n\r\n    /**\r\n     * Create an instance of the Legend.\r\n     * @param _extensionUri Extension URI. \r\n     */\r\n    public constructor(_extensionUri: vscode.Uri) {\r\n        this._extensionUri = _extensionUri;\r\n        this.legendData = [];\r\n    }\r\n\r\n    /**\r\n     * Revolves a webview view.\r\n     * resolveWebviewView is called when a view first becomes visible.\r\n     * This may happen when the view is first loaded or when the user hides and then shows a view again.\r\n     * @param webviewView Webview view to restore. The provider should take ownership of this view. \r\n     * The provider must set the webview's .html and hook up all webview events it is interested in.\r\n     */\r\n    public resolveWebviewView(webviewView: vscode.WebviewView): void {\r\n        this._view = webviewView;\r\n\r\n        webviewView.webview.options = {\r\n            // Allow scripts in the webview\r\n            enableScripts: true,\r\n\r\n            localResourceRoots: [\r\n                vscode.Uri.joinPath(this._extensionUri, \"media\")\r\n            ],\r\n        };\r\n\r\n        webviewView.webview.html = this._getHtmlForWebview(webviewView.webview);\r\n        \r\n        this.showLegend();\r\n    }\r\n\r\n    /**\r\n     * Set list of legend elements.\r\n     * @param legendData List of legend elements.\r\n     */\r\n    public setLegendData(legendData: { license: string; color: string; }[]) {\r\n        this.legendData = legendData;\r\n    }\r\n\r\n    /**\r\n     * Send message with list of legend elements to the legend.js file.\r\n     */\r\n    public showLegend() {\r\n        this._view?.webview.postMessage({\r\n            command: \"show-legend-s\",\r\n            legend: this.legendData\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Create HTML content of the WebView.\r\n     * @param webview WebView instance.\r\n     * @returns HTML content.\r\n     */\r\n    private _getHtmlForWebview(webview: vscode.Webview) {\r\n        // // And the uri we use to load this script in the webview\r\n        const scriptUri = webview.asWebviewUri(\r\n            vscode.Uri.joinPath(this._extensionUri, \"media\", \"legend.js\")\r\n        );\r\n\r\n        // Local path to css styles\r\n\r\n        // Uri to load styles into webview\r\n        const stylesResetUri = webview.asWebviewUri(vscode.Uri.joinPath(\r\n            this._extensionUri,\r\n            \"media\",\r\n            \"reset.css\"\r\n        ));\r\n        const stylesMainUri = webview.asWebviewUri(vscode.Uri.joinPath(\r\n            this._extensionUri,\r\n            \"media\",\r\n            \"vscode.css\"\r\n        ));\r\n\r\n        //// Use a nonce to only allow specific scripts to be run\r\n        const nonce = getNonce();\r\n\r\n        return `<!DOCTYPE html>\r\n\t\t\t<html lang=\"en\">\r\n\t\t\t    <head>\r\n\t\t\t    \t<meta charset=\"UTF-8\">\r\n\t\t\t    \t<!--\r\n\t\t\t    \t\tUse a content security policy to only allow loading images from https or from our extension directory,\r\n\t\t\t    \t\tand only allow scripts that have a specific nonce.\r\n                    -->\r\n                    <meta http-equiv=\"Content-Security-Policy\" content=\"style-src 'unsafe-inline' ${webview.cspSource}; script-src 'nonce-${nonce}';\">\r\n\t\t\t    \t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n\t\t\t    \t<link href=\"${stylesMainUri}\" rel=\"stylesheet\">\r\n\t\t\t    \t<link href=\"${stylesResetUri}\" rel=\"stylesheet\">\r\n\t\t\t    </head>\r\n                <body>\r\n                    <div id=\"legend\">\r\n                        <script src=\"${scriptUri}\" type=\"module\" nonce=\"${nonce}\"></script>\r\n                    <div>\r\n\t\t\t    </body>\r\n\t\t\t</html>`;\r\n    }\r\n}\r\n","import * as vscode from \"vscode\";\r\nimport { DEFAULT_DISTANCE, DEFAULT_ITERATIONS, DEFAULT_STRENGTH } from \"../support/constants\";\r\nimport { addNodeToRemoved, createVizualization, exportSVG, findNodes } from \"../extension\";\r\nimport { getNonce, getRecipePath, openRecipe } from \"../support/helpers\";\r\nimport { Node } from \"../model/Node\";\r\nimport { parseRecipe } from \"../parser/recipe_parser\";\r\n\r\n/**\r\n * Class representing a sidebar menu.\r\n */\r\nexport class Sidebar implements vscode.WebviewViewProvider {\r\n\r\n    /**\r\n     * Current WebViewView.\r\n     */\r\n    private _view?: vscode.WebviewView;\r\n    //_doc?: vscode.TextDocument;\r\n\r\n    /**\r\n     * Extension URI.\r\n     */\r\n    private readonly _extensionUri: vscode.Uri;\r\n\r\n    /**\r\n     * Selected node from visualization.\r\n     */\r\n    private selectedNode: Node | undefined;\r\n\r\n\r\n    //public revive(panel: vscode.WebviewView) {\r\n    //    this._view = panel;\r\n    //}\r\n\r\n    /**\r\n     * Create an instance of the Sidebar.\r\n     * @param _extensionUri Extension URI. \r\n     */\r\n    public constructor(_extensionUri: vscode.Uri) {\r\n        this._extensionUri = _extensionUri;\r\n    }\r\n\r\n    /**\r\n     * Revolves a webview view.\r\n     * resolveWebviewView is called when a view first becomes visible.\r\n     * This may happen when the view is first loaded or when the user hides and then shows a view again.\r\n     * @param webviewView Webview view to restore. The provider should take ownership of this view. \r\n     * The provider must set the webview's .html and hook up all webview events it is interested in.\r\n     */\r\n    public resolveWebviewView(webviewView: vscode.WebviewView): void {\r\n        this._view = webviewView;\r\n\r\n        webviewView.webview.options = {\r\n            // Allow scripts in the webview\r\n            enableScripts: true,\r\n\r\n            localResourceRoots: [\r\n                vscode.Uri.joinPath(this._extensionUri, \"media\")\r\n            ],\r\n        };\r\n\r\n        webviewView.webview.html = this._getHtmlForWebview(webviewView.webview);\r\n\r\n        webviewView.webview.onDidReceiveMessage(async (data) => {\r\n            switch (data.command) {\r\n                case \"visualize-s\": {\r\n                    if (data.distance == \"\" || data.iterations == \"\" || data.strength == \"\") {\r\n                        vscode.window.showErrorMessage(\"Invalid force settings!\");\r\n                        return;\r\n                    }\r\n                    createVizualization(this._extensionUri, data.type, data.distance, data.iterations, data.strength, data.mode);\r\n                    break;\r\n                }\r\n                case \"remove-selected-s\": {\r\n                    if (!this.selectedNode) {\r\n                        vscode.window.showInformationMessage(\"No node selected!\");\r\n                        return;\r\n                    }\r\n\r\n                    addNodeToRemoved(this.selectedNode.getName(), this.selectedNode.getRecipe(), this.selectedNode.getId());\r\n                    this.clearSelectedNode();\r\n\r\n                    break;\r\n                }\r\n                case \"open-selected-recipe-s\": {\r\n                    if (!this.selectedNode) {\r\n                        vscode.window.showInformationMessage(\"No node selected!\");\r\n                        return;\r\n                    }\r\n\r\n                    openRecipe(this.selectedNode.getRecipe());\r\n\r\n                    break;\r\n                }\r\n                case \"call-export-svg-s\": {\r\n                    exportSVG();\r\n                    break;\r\n                }\r\n                case \"find-nodes-s\": {\r\n                    findNodes(data.search);\r\n                    this.clearSelectedNode();\r\n                    break;\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Select a node from visualization. Set information to the sidebar.js file.\r\n     * @param node Selected node.\r\n     */\r\n    public selectNode(node: Node) {\r\n        this.selectedNode = node;\r\n\r\n        var recipePath = getRecipePath(this.selectedNode.getRecipe());\r\n        var license = this.selectedNode.getLicense();\r\n\r\n        if (license === \"\") {\r\n            license = parseRecipe(recipePath).license;\r\n        }\r\n\r\n        this._view?.webview.postMessage({\r\n            command: \"select-node-s\",\r\n            name: node.getName(),\r\n            recipe: node.getRecipe(),\r\n            licence: license\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Clear information about selected node. Send this information to the sidebar.js file.\r\n     */\r\n    public clearSelectedNode() {\r\n        this.selectedNode = undefined;\r\n\r\n        this._view?.webview.postMessage({\r\n            command: \"clear-selected-node-s\",\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Create HTML content of the WebView.\r\n     * @param webview WebView instance.\r\n     * @returns HTML content.\r\n     */\r\n    private _getHtmlForWebview(webview: vscode.Webview): string {\r\n        const scriptUri = webview.asWebviewUri(\r\n            vscode.Uri.joinPath(this._extensionUri, \"media\", \"sidebar.js\")\r\n        );\r\n\r\n        const stylesResetUri = webview.asWebviewUri(vscode.Uri.joinPath(\r\n            this._extensionUri,\r\n            \"media\",\r\n            \"reset.css\"\r\n        ));\r\n        const stylesMainUri = webview.asWebviewUri(vscode.Uri.joinPath(\r\n            this._extensionUri,\r\n            \"media\",\r\n            \"vscode.css\"\r\n        ));\r\n        \r\n        const nonce = getNonce();\r\n\r\n        return `<!DOCTYPE html>\r\n\t\t\t<html lang=\"en\">\r\n\t\t\t    <head>\r\n\t\t\t    \t<meta charset=\"UTF-8\">\r\n\t\t\t    \t<!--\r\n\t\t\t    \t\tUse a content security policy to only allow loading images from https or from our extension directory,\r\n\t\t\t    \t\tand only allow scripts that have a specific nonce.\r\n                    -->\r\n                    <meta http-equiv=\"Content-Security-Policy\" content=\"style-src 'unsafe-inline' ${webview.cspSource}; script-src 'nonce-${nonce}';\">\r\n\t\t\t    \t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n\t\t\t    \t<link href=\"${stylesMainUri}\" rel=\"stylesheet\">\r\n\t\t\t    \t<link href=\"${stylesResetUri}\" rel=\"stylesheet\">\r\n\t\t\t    </head>\r\n                <body>\r\n                    <div class=\"menu\">\r\n                        <h4>Task type:</h4>\r\n                        <select id=\"task_type\">\r\n                            <option value=\"default\">DEFAULT</option>\r\n                            <option value=\"do_build\">do_build</option>\r\n                            <option value=\"do_compile\">do_compile</option>\r\n                            <option value=\"do_compile_ptest_base\">do_compile_ptest_base</option>\r\n                            <option value=\"do_configure\">do_configure</option>\r\n                            <option value=\"do_configure_ptest_base\">do_configure_ptest_base</option>\r\n                            <option value=\"do_deploy_source_date_epoch\">do_deploy_source_date_epoch</option>\r\n                            <option value=\"do_fetch\">do_fetch</option>\r\n                            <option value=\"do_install\">do_install</option>\r\n                            <option value=\"do_install_ptest_base\">do_install_ptest_base</option>\r\n                            <option value=\"do_package\">do_package</option>\r\n                            <option value=\"do_package_qa\">do_package_qa</option>\r\n                            <option value=\"do_package_write_rpm\">do_package_write_rpm</option>\r\n                            <option value=\"do_packagedata\">do_packagedata</option>\r\n                            <option value=\"do_patch\">do_patch</option>\r\n                            <option value=\"do_populate_lic\">do_populate_lic</option>\r\n                            <option value=\"do_populate_sysroot\">do_populate_sysroot</option>\r\n                            <option value=\"do_prepare_recipe_sysroot\">do_prepare_recipe_sysroot</option>\r\n                            <option value=\"do_unpack\">do_unpack</option>\r\n                            <option value=\"do_populate_sysroot\">do_populate_sysroot</option>\r\n                        </select>\r\n                        <h4>Mode:</h4>\r\n                        <select id=\"mode_type\">\r\n                            <option value=\"default\">DEFAULT</option>\r\n                            <option value=\"licenses\">Licenses</option>\r\n                            <option value=\"affected_nodes\">Affected nodes</option>\r\n                        </select>\r\n                        <br>\r\n                        <br>\r\n                        <h4>Force link distance:</h4>\r\n                        <input id=\"distance\" type=\"number\" value=\"${DEFAULT_DISTANCE}\"></input>\r\n                        <h4>Force link iterations:</h4>\r\n                        <input id=\"iterations\" type=\"number\" value=\"${DEFAULT_ITERATIONS}\"></input>\r\n                        <h4>Force node strength (repulsion):</h4>\r\n                        <input id=\"strength\" type=\"number\" value=\"${DEFAULT_STRENGTH}\"></input>\r\n                        <br>\r\n                        <br>\r\n                        <button type=\"button\" id=\"generate\">Visualize</button>\r\n                        <button type=\"button\" id=\"export\">Export SVG</button>\r\n                        <br>\r\n                        <br>\r\n                        <input id=\"search-box\" placeholder=\"search-string\"></input>\r\n                        <button type=\"button\" id=\"find-nodes\">Find nodes</button>\r\n                        <hr>\r\n                        <h3>Selected node:</h3>\r\n                        <h4>Name:</h4>\r\n                        <div id=\"selected-name\" style=\"color:green\">-none-</div>\r\n                        <h4>License:</h4>\r\n                        <div id=\"selected-licence\" style=\"color:green\">-none-</div>\r\n                        <h4>Recipe:</h4>\r\n                        <div id=\"selected-recipe\" style=\"color:green\">-none-</div>\r\n                        <br>\r\n                        <button type=\"button\" id=\"remove-selected\">Remove</button>\r\n                        <button type=\"button\" id=\"open-recipe\">Open recipe</button>\r\n                        <script src=\"${scriptUri}\" type=\"module\" nonce=\"${nonce}\"></script>\r\n                    <div>\r\n\t\t\t    </body>\r\n\t\t\t</html>`;\r\n    }\r\n}\r\n","import { writeFileSync } from \"fs\";\r\nimport * as vscode from \"vscode\";\r\nimport { selectNode, setLegendData } from \"../extension\";\r\nimport { getNonce } from \"../support/helpers\";\r\nimport { Node } from \"../model/Node\";\r\n\r\n/**\r\n * Class representing a panel (tab) with visualization\r\n */\r\nexport class VisualizationPanel {\r\n\r\n    /**\r\n     * Identifies the type of the WebView panel.\r\n     */\r\n    public readonly viewType = \"visualization\";\r\n\r\n    /**\r\n     * WebViewPanel instance.\r\n     */\r\n    private _panel: vscode.WebviewPanel | undefined;\r\n\r\n    /**\r\n     * Extension URI.\r\n     */\r\n    private readonly _extensionUri: vscode.Uri;\r\n\r\n    /**\r\n     * List of disposables, which should be disposed when the panel is disposed.\r\n     */\r\n    private _disposables: vscode.Disposable[] = [];\r\n\r\n    /**\r\n     * JSON string with graph data.\r\n     */\r\n    private graphString: string | undefined;\r\n\r\n    /**\r\n     * Mode of analysis.\r\n     */\r\n    private mode: string | undefined;\r\n\r\n    /**\r\n     * Distance between the nodes (for the force directed algorithm).\r\n     */\r\n    private distance: number | undefined;\r\n\r\n    /**\r\n     * Number of iterations (for the force directed algorithm).\r\n     */\r\n    private iterations: number | undefined;\r\n\r\n    /**\r\n     * Strength of the force between nodes (for the force directed algorithm).\r\n     */\r\n    private strength: number | undefined;\r\n\r\n    /**\r\n     * Stores if window is shown.\r\n     */\r\n    private isShown: boolean = false;\r\n\r\n    /**\r\n     * Creates and show a panel or just show if already exists.\r\n     * @param extensionUri Extension URI.\r\n     * @returns void\r\n     */\r\n    public createAndShow(extensionUri: vscode.Uri): void {\r\n        this.dispose();\r\n        const column = vscode.window.activeTextEditor\r\n            ? vscode.window.activeTextEditor.viewColumn\r\n            : undefined;\r\n\r\n        const panel = vscode.window.createWebviewPanel(\r\n            this.viewType,\r\n            \"Visualization\",\r\n            column || vscode.ViewColumn.One,\r\n            {\r\n                enableScripts: true,\r\n                retainContextWhenHidden: true,\r\n                localResourceRoots: [ // only scripts and css file from these folders can be used\r\n                    vscode.Uri.joinPath(extensionUri, \"media\")\r\n                ],\r\n            }\r\n        );\r\n\r\n        panel.webview.html = this._getHtmlForWebview(panel.webview)\r\n        this.initMessageReciever(panel);\r\n\r\n        panel.onDidDispose(() => this.dispose(), null, this._disposables);\r\n\r\n        this._panel = panel;\r\n        this.isShown = true;\r\n    }\r\n\r\n    //public static kill() {\r\n    //    VisualizationPanel.currentPanel?.dispose();\r\n    //    VisualizationPanel.currentPanel = undefined;\r\n    //}\r\n    //\r\n    //public static revive(panel: vscode.WebviewPanel, extensionUri: vscode.Uri) {\r\n    //    VisualizationPanel.currentPanel = new VisualizationPanel(panel, extensionUri);\r\n    //}\r\n\r\n    /**\r\n     * Initialize panel class.\r\n     * @param extensionUri Extension URI.\r\n     */\r\n    public constructor(extensionUri: vscode.Uri) {\r\n        this._extensionUri = extensionUri;\r\n    }\r\n\r\n    /**\r\n     * Update visualization data of  the panel.\r\n     * @param graphString JSON string with graph data.\r\n     * @param mode Mode of analysis.\r\n     * @param distance Distance between the nodes (for the force directed algorithm).\r\n     * @param iterations Number of iterations (for the force directed algorithm).\r\n     * @param strength Strength of the force between nodes (for the force directed algorithm).\r\n     */\r\n    public updateData(graphString: string, mode: string, distance: number, iterations: number, strength: number) {\r\n        this.graphString = graphString;\r\n        this.mode = mode;\r\n        this.distance = distance;\r\n        this.iterations = iterations;\r\n        this.strength = strength;\r\n    }\r\n\r\n    /**\r\n     * Initialize actions for different messages.\r\n     * @param panel WebView panel.\r\n     */\r\n    private initMessageReciever(panel: vscode.WebviewPanel) {\r\n        panel.webview.onDidReceiveMessage(async (data) => {\r\n            switch (data.command) {\r\n                case \"select-node-v\": {\r\n                    if (!data.name) {\r\n                        return;\r\n                    }\r\n\r\n                    var selectedNode = new Node(data.id, data.name);\r\n                    selectedNode.setRecipe(data.recipe);\r\n\r\n                    selectNode(selectedNode, data.used_by, data.requested, data.affected);\r\n\r\n                    break;\r\n                }\r\n                case \"export-svg-v\": {\r\n                    if (!data.svg) {\r\n                        return;\r\n                    }\r\n                    vscode.window.showSaveDialog({ filters: { \"Images\": [\"svg\"] } }).then(file => {\r\n                        if (file !== undefined) {\r\n                            writeFileSync(file.fsPath, '<?xml version=\"1.0\" standalone=\"no\"?>\\r\\n' + data.svg);\r\n                        }\r\n                    });\r\n\r\n                    break;\r\n                }\r\n                case \"show-legend-v\": {\r\n                    setLegendData(data.legend);\r\n\r\n                    break;\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Close the panel and clear resources.\r\n     */\r\n    private dispose() {\r\n        this._panel?.dispose();\r\n\r\n        while (this._disposables.length) {\r\n            const x = this._disposables.pop();\r\n            if (x) {\r\n                x.dispose();\r\n            }\r\n        }\r\n\r\n        this.isShown = false;\r\n    }\r\n\r\n    /**\r\n     * Send message to the visualization.js file that the node with given ID should be removed.\r\n     * @param id ID of the node which should be removed.\r\n     */\r\n    public removeNode(id: number) {\r\n        this._panel?.webview.postMessage({\r\n            command: \"remove-node-v\",\r\n            id: id\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Send message to the visualization.js file that the node with given ID should be returned\r\n     * to visualization.\r\n     * @param name Name of the node which should be returned to visualization.\r\n     */\r\n    public returnNode(name: string) {\r\n        this._panel?.webview.postMessage({\r\n            command: \"return-node-v\",\r\n            name: name\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Send message to the visualization.js file that the SVG should be exported.\r\n     */\r\n    public callExportSVG() {\r\n        this._panel?.webview.postMessage({\r\n            command: \"call-export-svg-v\"\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Send message to the visualization.js file that nodes with search string in names should be highlighted.\r\n     * @param search String which should be used to search for nodes.\r\n     */\r\n    public findNodes(search: string) {\r\n        this._panel?.webview.postMessage({\r\n            command: \"find-nodes-v\",\r\n            search: search\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Send message to the visualization.js file that the node from the TreeView should be selected.\r\n     * @param name Name of the node which should be selected.\r\n     */\r\n    public selectNodeFromList(name: string) {\r\n        this._panel?.webview.postMessage({\r\n            command: \"select-node-from-list-v\",\r\n            name: name\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets if window is shown.\r\n     * @returns false if window in not shown else true.\r\n     */\r\n    public isWindowShown() {\r\n        return this.isShown;\r\n    }\r\n\r\n    /**\r\n     * Create HTML content of the WebView.\r\n     * @param webview WebView instance.\r\n     * @returns HTML content.\r\n     */\r\n    private _getHtmlForWebview(webview: vscode.Webview) {\r\n        const scriptUri = webview.asWebviewUri(\r\n            vscode.Uri.joinPath(this._extensionUri, \"media\", \"visualization.js\")\r\n        );\r\n\r\n        const stylesResetUri = webview.asWebviewUri(vscode.Uri.joinPath(\r\n            this._extensionUri,\r\n            \"media\",\r\n            \"reset.css\"\r\n        ));\r\n        const stylesMainUri = webview.asWebviewUri(vscode.Uri.joinPath(\r\n            this._extensionUri,\r\n            \"media\",\r\n            \"vscode.css\"\r\n        ));\r\n\r\n        const nonce = getNonce();\r\n\r\n        return `<!DOCTYPE html>\r\n\t\t\t<html lang=\"en\">\r\n\t\t\t    <head>\r\n\t\t\t    \t<meta charset=\"UTF-8\">\r\n\t\t\t    \t<!--\r\n\t\t\t    \t\tUse a content security policy to only allow loading images from https or from our extension directory,\r\n\t\t\t    \t\tand only allow scripts that have a specific nonce.\r\n                    -->\r\n                    <meta http-equiv=\"Content-Security-Policy\" content=\"style-src 'unsafe-inline' ${webview.cspSource}; script-src 'nonce-${nonce}';\">\r\n\t\t\t    \t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n\t\t\t    \t<link href=\"${stylesMainUri}\" rel=\"stylesheet\">\r\n\t\t\t    \t<link href=\"${stylesResetUri}\" rel=\"stylesheet\">\r\n\t\t\t    </head>\r\n                <body>\r\n                    <div class=\"chart\">\r\n                        <div id=\"visualization\"></div>\r\n                        <input type=\"hidden\" id=\"graph\" name=\"graph\" value='${this.graphString}''>\r\n                        <input type=\"hidden\" id=\"mode\" name=\"mode\" value='${this.mode}''>\r\n                        <input type=\"hidden\" id=\"distance\" value=\"${this.distance}\">\r\n                        <input type=\"hidden\" id=\"iterations\" value=\"${this.iterations}\">\r\n                        <input type=\"hidden\" id=\"strength\" value=\"${this.strength}\">\r\n                        <script src=\"${scriptUri}\" type=\"module\" nonce=\"${nonce}\"></script>\r\n                    </div>\r\n\t\t\t    </body>\r\n\t\t\t</html>`;\r\n    }\r\n}\r\n","\"use strict\";\nvar __spreadArrays = (this && this.__spreadArrays) || function () {\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n            r[k] = a[j];\n    return r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TSMap = void 0;\nvar TSMap = /** @class */ (function () {\n    function TSMap(inputMap) {\n        var t = this;\n        t._keys = [];\n        t._values = [];\n        t.length = 0;\n        if (inputMap) {\n            inputMap.forEach(function (v, k) {\n                t.set(v[0], v[1]);\n            });\n        }\n    }\n    /**\n     * Convert a JSON object to a map.\n     *\n     * @param {*} jsonObject JSON object to convert\n     * @param {boolean} [convertObjs] convert nested objects to maps\n     * @returns {TSMap<K, V>}\n     * @memberof TSMap\n     */\n    TSMap.prototype.fromJSON = function (jsonObject, convertObjs) {\n        var t = this;\n        var setProperty = function (value) {\n            if (value !== null && typeof value === 'object' && convertObjs)\n                return new TSMap().fromJSON(value, true);\n            if (Array.isArray(value) && convertObjs)\n                return value.map(function (v) { return setProperty(v); });\n            return value;\n        };\n        Object.keys(jsonObject).forEach(function (property) {\n            if (jsonObject.hasOwnProperty(property)) {\n                t.set(property, setProperty(jsonObject[property]));\n            }\n        });\n        return t;\n    };\n    /**\n     * Outputs the contents of the map to a JSON object\n     *\n     * @returns {{[key: string]: V}}\n     * @memberof TSMap\n     */\n    TSMap.prototype.toJSON = function () {\n        var obj = {};\n        var t = this;\n        var getValue = function (value) {\n            if (value instanceof TSMap) {\n                return value.toJSON();\n            }\n            else if (Array.isArray(value)) {\n                return value.map(function (v) { return getValue(v); });\n            }\n            else {\n                return value;\n            }\n        };\n        t.keys().forEach(function (k) {\n            obj[String(k)] = getValue(t.get(k));\n        });\n        return obj;\n    };\n    /**\n     * Get an array of arrays respresenting the map, kind of like an export function.\n     *\n     * @returns {(Array<Array<K|V>>)}\n     *\n     * @memberOf TSMap\n     */\n    TSMap.prototype.entries = function () {\n        var _this = this;\n        return [].slice.call(this.keys().map(function (k) { return [k, _this.get(k)]; }));\n    };\n    /**\n     * Get an array of keys in the map.\n     *\n     * @returns {Array<K>}\n     *\n     * @memberOf TSMap\n     */\n    TSMap.prototype.keys = function () {\n        return [].slice.call(this._keys);\n    };\n    /**\n     * Get an array of the values in the map.\n     *\n     * @returns {Array<V>}\n     *\n     * @memberOf TSMap\n     */\n    TSMap.prototype.values = function () {\n        return [].slice.call(this._values);\n    };\n    /**\n     * Check to see if an item in the map exists given it's key.\n     *\n     * @param {K} key\n     * @returns {Boolean}\n     *\n     * @memberOf TSMap\n     */\n    TSMap.prototype.has = function (key) {\n        return this._keys.indexOf(key) > -1;\n    };\n    /**\n     * Get a specific item from the map given it's key.\n     *\n     * @param {K} key\n     * @returns {V}\n     *\n     * @memberOf TSMap\n     */\n    TSMap.prototype.get = function (key) {\n        var i = this._keys.indexOf(key);\n        return i > -1 ? this._values[i] : undefined;\n    };\n    /**\n     * Safely retrieve a deeply nested property.\n     *\n     * @param {K[]} path\n     * @returns {V}\n     *\n     * @memberOf TSMap\n     */\n    TSMap.prototype.deepGet = function (path) {\n        if (!path || !path.length)\n            return null;\n        var recursiveGet = function (obj, path) {\n            if (obj === undefined || obj === null)\n                return null;\n            if (!path.length)\n                return obj;\n            return recursiveGet(obj instanceof TSMap ? obj.get(path[0]) : obj[path[0]], path.slice(1));\n        };\n        return recursiveGet(this.get(path[0]), path.slice(1));\n    };\n    /**\n     * Set a specific item in the map given it's key, automatically adds new items as needed.\n     * Ovewrrites existing items\n     *\n     * @param {K} key\n     * @param {V} value\n     *\n     * @memberOf TSMap\n     */\n    TSMap.prototype.set = function (key, value) {\n        var t = this;\n        // check if key exists and overwrite\n        var i = this._keys.indexOf(key);\n        if (i > -1) {\n            t._values[i] = value;\n        }\n        else {\n            t._keys.push(key);\n            t._values.push(value);\n            t.length = t._values.length;\n        }\n        return this;\n    };\n    /**\n     * Enters a value into the map forcing the keys to always be sorted.\n     * Stolen from https://machinesaredigging.com/2014/04/27/binary-insert-how-to-keep-an-array-sorted-as-you-insert-data-in-it/\n     * Best case speed is O(1), worse case is O(N).\n     *\n     * @param {K} key\n     * @param {V} value\n     * @param {number} [startVal]\n     * @param {number} [endVal]\n     * @returns {this}\n     * @memberof TSMap\n     */\n    TSMap.prototype.sortedSet = function (key, value, startVal, endVal) {\n        var t = this;\n        var length = this._keys.length;\n        var start = startVal || 0;\n        var end = endVal !== undefined ? endVal : length - 1;\n        if (length == 0) {\n            t._keys.push(key);\n            t._values.push(value);\n            return t;\n        }\n        if (key == this._keys[start]) {\n            this._values[start] = value;\n            return this;\n        }\n        if (key == this._keys[end]) {\n            this._values[end] = value;\n            return this;\n        }\n        if (key > this._keys[end]) {\n            this._keys.splice(end + 1, 0, key);\n            this._values.splice(end + 1, 0, value);\n            return this;\n        }\n        if (key < this._keys[start]) {\n            this._values.splice(start, 0, value);\n            this._keys.splice(start, 0, key);\n            return this;\n        }\n        if (start >= end) {\n            return this;\n        }\n        var m = start + Math.floor((end - start) / 2);\n        if (key < this._keys[m]) {\n            return this.sortedSet(key, value, start, m - 1);\n        }\n        if (key > this._keys[m]) {\n            return this.sortedSet(key, value, m + 1, end);\n        }\n        return this;\n    };\n    /**\n     * Provide a number representing the number of items in the map\n     *\n     * @returns {number}\n     *\n     * @memberOf TSMap\n     */\n    TSMap.prototype.size = function () {\n        return this.length;\n    };\n    /**\n     * Clear all the contents of the map\n     *\n     * @returns {TSMap<K,V>}\n     *\n     * @memberOf TSMap\n     */\n    TSMap.prototype.clear = function () {\n        var t = this;\n        t._keys.length = t.length = t._values.length = 0;\n        return this;\n    };\n    /**\n     * Delete an item from the map given it's key\n     *\n     * @param {K} key\n     * @returns {Boolean}\n     *\n     * @memberOf TSMap\n     */\n    TSMap.prototype.delete = function (key) {\n        var t = this;\n        var i = t._keys.indexOf(key);\n        if (i > -1) {\n            t._keys.splice(i, 1);\n            t._values.splice(i, 1);\n            t.length = t._keys.length;\n            return true;\n        }\n        return false;\n    };\n    /**\n     * Used to loop through the map.\n     *\n     * @param {(value:V,key?:K,index?:number) => void} callbackfn\n     *\n     * @memberOf TSMap\n     */\n    TSMap.prototype.forEach = function (callbackfn) {\n        var _this = this;\n        this._keys.forEach(function (v, i) {\n            callbackfn(_this.get(v), v, i);\n        });\n    };\n    /**\n     * Returns an array containing the returned value of each item in the map.\n     *\n     * @param {(value:V,key?:K,index?:number) => any} callbackfn\n     * @returns {Array<any>}\n     *\n     * @memberOf TSMap\n     */\n    TSMap.prototype.map = function (callbackfn) {\n        var _this = this;\n        return this.keys().map(function (itemKey, i) {\n            return callbackfn(_this.get(itemKey), itemKey, i);\n        });\n    };\n    /**\n     * Removes items based on a conditional function passed to filter.\n     * Mutates the map in place.\n     *\n     * @param {(value:V,key?:K,index?:number) => Boolean} callbackfn\n     * @returns {TSMap<K,V>}\n     *\n     * @memberOf TSMap\n     */\n    TSMap.prototype.filter = function (callbackfn) {\n        var t = this;\n        __spreadArrays(t._keys).forEach(function (v, i) {\n            if (callbackfn(t.get(v), v, i) === false)\n                t.delete(v);\n        });\n        return this;\n    };\n    /**\n     * Creates a deep copy of the map, breaking all references to the old map and it's children.\n     * Uses JSON.parse so any functions will be stringified and lose their original purpose.\n     *\n     * @returns {TSMap<K,V>}\n     *\n     * @memberOf TSMap\n     */\n    TSMap.prototype.clone = function () {\n        return new TSMap(this.entries());\n    };\n    return TSMap;\n}());\nexports.TSMap = TSMap;\n","module.exports = require(\"vscode\");","module.exports = require(\"fs\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(112);\n"],"names":["removedTreeDataProvider","usedByTreeDataProvider","requestedTreeDataProvider","affectedTreeDataProvider","sidebar","legend","visualizationPanel","createVizualization","extensionUri","type","distance","iterations","strength","mode","graphString","undefined","vscode","workspace","workspaceFolders","dotPath","uri","fsPath","existsSync","window","showErrorMessage","DotParser","parseDotFile","writeFileSync","commands","executeCommand","updateData","clearAllNodes","refresh","clearSelectedNode","createAndShow","returnToVisualization","name","removeNode","returnNode","context","Sidebar","Legend","VisualizationPanel","RemovedTreeDataProvider","ConnectionsTreeDataProvider","subscriptions","push","registerCommand","DEFAULT_TYPE","DEFAULT_DISTANCE","DEFAULT_ITERATIONS","DEFAULT_STRENGTH","DEFAULT_MODE","item","label","toString","getRecipe","openRecipe","isRemoved","selectNodeFromList","registerWebviewViewProvider","webviewOptions","retainContextWhenHidden","registerTreeDataProvider","recipe","id","addNode","callExportSVG","seach","isWindowShown","findNodes","legendData","setLegendData","showLegend","node","used_by","requested","affected","selectNode","updateNodes","constructor","source","target","this","license","getId","getName","setRecipe","getLicense","setLicense","parseDotFileDefault","parseDotFileTaskType","index","data","loadFile","nodes","links","forEach","line","lineData","split","includes","recipeName","replace","trim","dependentRecipeName","addGraphData","setNodeRecipe","generateGraphJSON","some","rn","find","Node","link","Link","labelSource","labelData","recipePath","length","parseRecipe","getRecipePath","graph","TSMap","set","JSON","stringify","toJSON","additionalInfo","i","workspacePath","pathData","file","readFileSync","err","possible","text","charAt","Math","floor","random","openTextDocument","then","document","showTextDocument","_onDidChangeTreeData","EventEmitter","onDidChangeTreeData","event","fire","getTreeItem","element","getChildren","nodeData","NodeTreeItem","is_removed","TreeItem","super","TreeItemCollapsibleState","None","tooltip","findIndex","splice","_extensionUri","resolveWebviewView","webviewView","_view","webview","options","enableScripts","localResourceRoots","Uri","joinPath","html","_getHtmlForWebview","postMessage","command","scriptUri","asWebviewUri","stylesResetUri","stylesMainUri","nonce","getNonce","cspSource","onDidReceiveMessage","selectedNode","showInformationMessage","addNodeToRemoved","exportSVG","search","licence","viewType","_disposables","isShown","dispose","column","activeTextEditor","viewColumn","panel","createWebviewPanel","ViewColumn","One","initMessageReciever","onDidDispose","_panel","svg","showSaveDialog","filters","x","pop","__spreadArrays","s","il","arguments","r","Array","k","a","j","jl","Object","defineProperty","exports","value","inputMap","t","_keys","_values","v","prototype","fromJSON","jsonObject","convertObjs","setProperty","isArray","map","keys","property","hasOwnProperty","obj","getValue","String","get","entries","_this","slice","call","values","has","key","indexOf","deepGet","path","recursiveGet","sortedSet","startVal","endVal","start","end","m","size","clear","delete","callbackfn","itemKey","filter","clone","module","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","__webpack_modules__"],"sourceRoot":""}